# accellera/spirit/v1_0.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:b6527470c75df5d826af8fd751f38a6c56cad0b2
# Generated 2016-11-15 00:26:33.713499 by PyXB version 1.2.5 using Python 3.5.2.final.0
# Namespace http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:0f4343ba-aaf4-11e6-bf86-0018f3ab7928')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.5'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}formatType
class formatType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """This is a hint to the user interface on how to obtain the value for user defined properties.  Float means a floating point number is expected.  Long means an integer is expected.  Bool means a boolean (true, false) is expected and choice means the user must pick from a list of possible values.  A choiceRef attribute is required for choice formats.  String means any text is acceptable."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'formatType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 22, 1)
    _Documentation = 'This is a hint to the user interface on how to obtain the value for user defined properties.  Float means a floating point number is expected.  Long means an integer is expected.  Bool means a boolean (true, false) is expected and choice means the user must pick from a list of possible values.  A choiceRef attribute is required for choice formats.  String means any text is acceptable.'
formatType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=formatType, enum_prefix=None)
formatType.float = formatType._CF_enumeration.addEnumeration(unicode_value='float', tag='float')
formatType.long = formatType._CF_enumeration.addEnumeration(unicode_value='long', tag='long')
formatType.bool = formatType._CF_enumeration.addEnumeration(unicode_value='bool', tag='bool')
formatType.choice = formatType._CF_enumeration.addEnumeration(unicode_value='choice', tag='choice')
formatType.string = formatType._CF_enumeration.addEnumeration(unicode_value='string', tag='string')
formatType._InitializeFacetMap(formatType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'formatType', formatType)
_module_typeBindings.formatType = formatType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeTypeType
class rangeTypeType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """This type is used to indicate how the minimum and maximum attributes values should be interpreted. For purposes of this attribute, an int is 4 bytes and a long is 8 bytes."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'rangeTypeType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 54, 1)
    _Documentation = 'This type is used to indicate how the minimum and maximum attributes values should be interpreted. For purposes of this attribute, an int is 4 bytes and a long is 8 bytes.'
rangeTypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=rangeTypeType, enum_prefix=None)
rangeTypeType.float = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='float', tag='float')
rangeTypeType.int = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
rangeTypeType.unsigned_int = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned int', tag='unsigned_int')
rangeTypeType.long = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='long', tag='long')
rangeTypeType.unsigned_long = rangeTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned long', tag='unsigned_long')
rangeTypeType._InitializeFacetMap(rangeTypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'rangeTypeType', rangeTypeType)
_module_typeBindings.rangeTypeType = rangeTypeType

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 85, 2)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.radio = STD_ANON._CF_enumeration.addEnumeration(unicode_value='radio', tag='radio')
STD_ANON.combo = STD_ANON._CF_enumeration.addEnumeration(unicode_value='combo', tag='combo')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 104, 2)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.vertical = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='vertical', tag='vertical')
STD_ANON_.horizontal = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='horizontal', tag='horizontal')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 32, 8)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.strong = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='strong', tag='strong')
STD_ANON_2.weak = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='weak', tag='weak')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 64, 12)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.illegal = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='illegal', tag='illegal')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitSteeringType
class bitSteeringType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bitSteeringType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 25, 1)
    _Documentation = None
bitSteeringType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=bitSteeringType, enum_prefix=None)
bitSteeringType.on = bitSteeringType._CF_enumeration.addEnumeration(unicode_value='on', tag='on')
bitSteeringType.off = bitSteeringType._CF_enumeration.addEnumeration(unicode_value='off', tag='off')
bitSteeringType.default = bitSteeringType._CF_enumeration.addEnumeration(unicode_value='default', tag='default')
bitSteeringType._InitializeFacetMap(bitSteeringType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'bitSteeringType', bitSteeringType)
_module_typeBindings.bitSteeringType = bitSteeringType

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 216, 4)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.required = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='required', tag='required')
STD_ANON_4.explicit = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='explicit', tag='explicit')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolveType
class resolveType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Determines how a property is resolved.  Immediate means the value is included in the XML document and cannot be changed by the user.  User means the value must be obtained from the user.  Optional means the user is given the opportunity to supply a value, but can leave the entry blank.  Dependent means the value depends on the value of other properties.  A dependency expression must be supplied in the dependency attribute.  Generated means the value will be provided by a generator."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'resolveType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 21, 1)
    _Documentation = 'Determines how a property is resolved.  Immediate means the value is included in the XML document and cannot be changed by the user.  User means the value must be obtained from the user.  Optional means the user is given the opportunity to supply a value, but can leave the entry blank.  Dependent means the value depends on the value of other properties.  A dependency expression must be supplied in the dependency attribute.  Generated means the value will be provided by a generator.'
resolveType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=resolveType, enum_prefix=None)
resolveType.immediate = resolveType._CF_enumeration.addEnumeration(unicode_value='immediate', tag='immediate')
resolveType.user = resolveType._CF_enumeration.addEnumeration(unicode_value='user', tag='user')
resolveType.dependent = resolveType._CF_enumeration.addEnumeration(unicode_value='dependent', tag='dependent')
resolveType.generated = resolveType._CF_enumeration.addEnumeration(unicode_value='generated', tag='generated')
resolveType._InitializeFacetMap(resolveType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'resolveType', resolveType)
_module_typeBindings.resolveType = resolveType

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 398, 7)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.void = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='void', tag='void')
STD_ANON_5.int = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Union simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}spiritURI
# superclasses pyxb.binding.datatypes.anySimpleType
class spiritURI (pyxb.binding.basis.STD_union):

    """SPIRIT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI"""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'spiritURI')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 459, 1)
    _Documentation = 'SPIRIT URI, like a standard xs:anyURI except that it can contain environment variables in the ${ } form, to be replaced by their value to provide the underlying URI'

    _MemberTypes = ( pyxb.binding.datatypes.anyURI, )
spiritURI._CF_pattern = pyxb.binding.facets.CF_pattern()
spiritURI._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=spiritURI)
spiritURI._InitializeFacetMap(spiritURI._CF_pattern,
   spiritURI._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'spiritURI', spiritURI)
_module_typeBindings.spiritURI = spiritURI

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dataTypeType
class dataTypeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """Enumerates C argument data types."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'dataTypeType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 465, 1)
    _Documentation = 'Enumerates C argument data types.'
dataTypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=dataTypeType, enum_prefix=None)
dataTypeType.int = dataTypeType._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
dataTypeType.unsigned_int = dataTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned int', tag='unsigned_int')
dataTypeType.long = dataTypeType._CF_enumeration.addEnumeration(unicode_value='long', tag='long')
dataTypeType.unsigned_long = dataTypeType._CF_enumeration.addEnumeration(unicode_value='unsigned long', tag='unsigned_long')
dataTypeType.float = dataTypeType._CF_enumeration.addEnumeration(unicode_value='float', tag='float')
dataTypeType.double = dataTypeType._CF_enumeration.addEnumeration(unicode_value='double', tag='double')
dataTypeType.char = dataTypeType._CF_enumeration.addEnumeration(unicode_value='char *', tag='char')
dataTypeType.void = dataTypeType._CF_enumeration.addEnumeration(unicode_value='void *', tag='void')
dataTypeType._InitializeFacetMap(dataTypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'dataTypeType', dataTypeType)
_module_typeBindings.dataTypeType = dataTypeType

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 31, 4)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.unknown = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_6.cSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='cSource', tag='cSource')
STD_ANON_6.cppSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='cppSource', tag='cppSource')
STD_ANON_6.asmSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='asmSource', tag='asmSource')
STD_ANON_6.vhdlSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='vhdlSource', tag='vhdlSource')
STD_ANON_6.vhdlSource_87 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='vhdlSource-87', tag='vhdlSource_87')
STD_ANON_6.vhdlSource_93 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='vhdlSource-93', tag='vhdlSource_93')
STD_ANON_6.verilogSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='verilogSource', tag='verilogSource')
STD_ANON_6.verilogSource_95 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='verilogSource-95', tag='verilogSource_95')
STD_ANON_6.verilogSource_2001 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='verilogSource-2001', tag='verilogSource_2001')
STD_ANON_6.swObject = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='swObject', tag='swObject')
STD_ANON_6.swObjectLibrary = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='swObjectLibrary', tag='swObjectLibrary')
STD_ANON_6.vhdlBinaryLibrary = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='vhdlBinaryLibrary', tag='vhdlBinaryLibrary')
STD_ANON_6.verilogBinaryLibrary = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='verilogBinaryLibrary', tag='verilogBinaryLibrary')
STD_ANON_6.unelaboratedHdl = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='unelaboratedHdl', tag='unelaboratedHdl')
STD_ANON_6.executableHdl = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='executableHdl', tag='executableHdl')
STD_ANON_6.systemVerilogSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='systemVerilogSource', tag='systemVerilogSource')
STD_ANON_6.systemVerilogSource_3_0 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='systemVerilogSource-3.0', tag='systemVerilogSource_3_0')
STD_ANON_6.systemVerilogSource_3_1 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='systemVerilogSource-3.1', tag='systemVerilogSource_3_1')
STD_ANON_6.systemCSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='systemCSource', tag='systemCSource')
STD_ANON_6.systemCSource_2_0 = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='systemCSource-2.0', tag='systemCSource_2_0')
STD_ANON_6.veraSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='veraSource', tag='veraSource')
STD_ANON_6.eSource = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='eSource', tag='eSource')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.Name, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 101, 4)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.and_ = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='and', tag='and_')
STD_ANON_7.or_ = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='or', tag='or_')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)
_module_typeBindings.STD_ANON_7 = STD_ANON_7

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}phaseScopeType
class phaseScopeType (pyxb.binding.datatypes.NMTOKEN, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'phaseScopeType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 110, 1)
    _Documentation = None
phaseScopeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=phaseScopeType, enum_prefix=None)
phaseScopeType.global_ = phaseScopeType._CF_enumeration.addEnumeration(unicode_value='global', tag='global_')
phaseScopeType.local = phaseScopeType._CF_enumeration.addEnumeration(unicode_value='local', tag='local')
phaseScopeType._InitializeFacetMap(phaseScopeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'phaseScopeType', phaseScopeType)
_module_typeBindings.phaseScopeType = phaseScopeType

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 142, 5)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.instance = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='instance', tag='instance')
STD_ANON_8.entity = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='entity', tag='entity')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)
_module_typeBindings.STD_ANON_8 = STD_ANON_8

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 27, 2)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.add = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='add', tag='add')
STD_ANON_9.remove = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='remove', tag='remove')
STD_ANON_9.replace = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='replace', tag='replace')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)
_module_typeBindings.STD_ANON_9 = STD_ANON_9

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 39, 2)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.add = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='add', tag='add')
STD_ANON_10.remove = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='remove', tag='remove')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)
_module_typeBindings.STD_ANON_10 = STD_ANON_10

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}accessType
class accessType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The read/write accessability of an addess block."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'accessType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 23, 2)
    _Documentation = 'The read/write accessability of an addess block.'
accessType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=accessType, enum_prefix=None)
accessType.read_only = accessType._CF_enumeration.addEnumeration(unicode_value='read-only', tag='read_only')
accessType.write_only = accessType._CF_enumeration.addEnumeration(unicode_value='write-only', tag='write_only')
accessType.read_write = accessType._CF_enumeration.addEnumeration(unicode_value='read-write', tag='read_write')
accessType._InitializeFacetMap(accessType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'accessType', accessType)
_module_typeBindings.accessType = accessType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bankAlignmentType
class bankAlignmentType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """'serial' or 'parallel' bank alignment."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankAlignmentType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 33, 2)
    _Documentation = "'serial' or 'parallel' bank alignment."
bankAlignmentType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=bankAlignmentType, enum_prefix=None)
bankAlignmentType.serial = bankAlignmentType._CF_enumeration.addEnumeration(unicode_value='serial', tag='serial')
bankAlignmentType.parallel = bankAlignmentType._CF_enumeration.addEnumeration(unicode_value='parallel', tag='parallel')
bankAlignmentType._InitializeFacetMap(bankAlignmentType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'bankAlignmentType', bankAlignmentType)
_module_typeBindings.bankAlignmentType = bankAlignmentType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}usageType
class usageType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Describes the usage of an address block."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'usageType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 42, 2)
    _Documentation = 'Describes the usage of an address block.'
usageType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=usageType, enum_prefix=None)
usageType.memory = usageType._CF_enumeration.addEnumeration(unicode_value='memory', tag='memory')
usageType.register = usageType._CF_enumeration.addEnumeration(unicode_value='register', tag='register')
usageType.reserved = usageType._CF_enumeration.addEnumeration(unicode_value='reserved', tag='reserved')
usageType._InitializeFacetMap(usageType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'usageType', usageType)
_module_typeBindings.usageType = usageType

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 293, 16)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.big = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='big', tag='big')
STD_ANON_11.little = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='little', tag='little')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)
_module_typeBindings.STD_ANON_11 = STD_ANON_11

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 49, 13)
    _Documentation = None
STD_ANON_12._CF_whiteSpace = pyxb.binding.facets.CF_whiteSpace(value=pyxb.binding.facets._WhiteSpace_enum.collapse)
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_whiteSpace)
_module_typeBindings.STD_ANON_12 = STD_ANON_12

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentSignalDirectionType
class componentSignalDirectionType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """The direction of a component signal."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'componentSignalDirectionType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 23, 1)
    _Documentation = 'The direction of a component signal.'
componentSignalDirectionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=componentSignalDirectionType, enum_prefix=None)
componentSignalDirectionType.in_ = componentSignalDirectionType._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
componentSignalDirectionType.out = componentSignalDirectionType._CF_enumeration.addEnumeration(unicode_value='out', tag='out')
componentSignalDirectionType.inout = componentSignalDirectionType._CF_enumeration.addEnumeration(unicode_value='inout', tag='inout')
componentSignalDirectionType._InitializeFacetMap(componentSignalDirectionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'componentSignalDirectionType', componentSignalDirectionType)
_module_typeBindings.componentSignalDirectionType = componentSignalDirectionType

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 133, 6)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.clock = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='clock', tag='clock')
STD_ANON_13.singleShot = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='singleShot', tag='singleShot')
STD_ANON_13.any = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='any', tag='any')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)
_module_typeBindings.STD_ANON_13 = STD_ANON_13

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}strengthType
class strengthType (pyxb.binding.datatypes.token, pyxb.binding.basis.enumeration_mixin):

    """Describes a signal strength."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'strengthType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 157, 1)
    _Documentation = 'Describes a signal strength.'
strengthType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=strengthType, enum_prefix=None)
strengthType.strong = strengthType._CF_enumeration.addEnumeration(unicode_value='strong', tag='strong')
strengthType.weak = strengthType._CF_enumeration.addEnumeration(unicode_value='weak', tag='weak')
strengthType._InitializeFacetMap(strengthType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'strengthType', strengthType)
_module_typeBindings.strengthType = strengthType

# Atomic simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}spiritNumberType
class spiritNumberType (pyxb.binding.datatypes.string):

    """Number format used by SPIRIT.  Supports any string handled by java.lang.Long.decode().  Also supports magnitude suffix of upper or lower case K, M, G or T."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'spiritNumberType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/simpleTypes.xsd', 21, 1)
    _Documentation = 'Number format used by SPIRIT.  Supports any string handled by java.lang.Long.decode().  Also supports magnitude suffix of upper or lower case K, M, G or T.'
spiritNumberType._CF_pattern = pyxb.binding.facets.CF_pattern()
spiritNumberType._CF_pattern.addPattern(pattern='-?((0x)|(0X)|#)?[0-9a-fA-F]*[kmgtKMGT]?')
spiritNumberType._InitializeFacetMap(spiritNumberType._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'spiritNumberType', spiritNumberType)
_module_typeBindings.spiritNumberType = spiritNumberType

# List simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}doubleList
# superclasses pyxb.binding.datatypes.anySimpleType
class doubleList (pyxb.binding.basis.STD_list):

    """List of doubles.  Used to build configurableDouble type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'doubleList')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/simpleTypes.xsd', 29, 1)
    _Documentation = 'List of doubles.  Used to build configurableDouble type.'

    _ItemType = pyxb.binding.datatypes.double
doubleList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'doubleList', doubleList)
_module_typeBindings.doubleList = doubleList

# Atomic simple type: [anonymous]
class STD_ANON_14 (componentSignalDirectionType, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 57, 12)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.in_ = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
STD_ANON_14.out = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='out', tag='out')
STD_ANON_14.inout = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='inout', tag='inout')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)
_module_typeBindings.STD_ANON_14 = STD_ANON_14

# List simple type: {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configurableDouble
# superclasses doubleList
class configurableDouble (pyxb.binding.basis.STD_list):

    """Can be a double or an empty string."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'configurableDouble')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/simpleTypes.xsd', 35, 1)
    _Documentation = 'Can be a double or an empty string.'

    _ItemType = pyxb.binding.datatypes.double
configurableDouble._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
configurableDouble._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
configurableDouble._InitializeFacetMap(configurableDouble._CF_minLength,
   configurableDouble._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'configurableDouble', configurableDouble)
_module_typeBindings.configurableDouble = configurableDouble

# Union simple type: [anonymous]
# superclasses pyxb.binding.datatypes.anySimpleType
class STD_ANON_15 (pyxb.binding.basis.STD_union):

    """Simple type that is a union of STD_ANON_14, STD_ANON_3."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 55, 8)
    _Documentation = None

    _MemberTypes = ( STD_ANON_14, STD_ANON_3, )
STD_ANON_15._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15)
STD_ANON_15.in_ = 'in'                            # originally STD_ANON_14.in_
STD_ANON_15.out = 'out'                           # originally STD_ANON_14.out
STD_ANON_15.inout = 'inout'                       # originally STD_ANON_14.inout
STD_ANON_15.illegal = 'illegal'                   # originally STD_ANON_3.illegal
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_pattern,
   STD_ANON_15._CF_enumeration)
_module_typeBindings.STD_ANON_15 = STD_ANON_15

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Choices used by user defined properties of spirit:formatType ="choice" """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 214, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choice uses Python identifier choice
    __choice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'choice'), 'choice', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choice', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 216, 4), )


    choice = property(__choice.value, __choice.set, None, 'Non-empty set of legal values for a user defined property of type spirit:formatType="choice" .')

    _ElementMap.update({
        __choice.name() : __choice
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Non-empty set of legal values for a user defined property of type spirit:formatType="choice" ."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 220, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 222, 7), )


    name = property(__name.value, __name.set, None, 'Choice key, available for reference by the spirit:choiceRef attribute of user defined properties of type spirit:formatType="choice".')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}enumeration uses Python identifier enumeration
    __enumeration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enumeration'), 'enumeration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0enumeration', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 227, 7), )


    enumeration = property(__enumeration.value, __enumeration.set, None, 'A possible value of spirit:choice')

    _ElementMap.update({
        __name.name() : __name,
        __enumeration.name() : __enumeration
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """A possible value of spirit:choice"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 231, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}text uses Python identifier text
    __text = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'text'), 'text', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_2_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0text', pyxb.binding.datatypes.string)
    __text._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 234, 11)
    __text._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 234, 11)

    text = property(__text.value, __text.set, None, 'When specified, displayed in place of the spirit:enumeration value ')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}help uses Python identifier help
    __help = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'help'), 'help', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_2_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0help', pyxb.binding.datatypes.string)
    __help._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 239, 11)
    __help._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 239, 11)

    help = property(__help.value, __help.set, None, 'Text that may be displayed if the user requests help about the meaning of an element')

    _ElementMap.update({

    })
    _AttributeMap.update({
        __text.name() : __text,
        __help.name() : __help
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Defines the signals and high-level function of a bus."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 78, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choices uses Python identifier choices
    __choices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'choices'), 'choices', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choices', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 210, 1), )


    choices = property(__choices.value, __choices.set, None, 'Choices used by user defined properties of spirit:formatType ="choice"')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}directConnection uses Python identifier directConnection
    __directConnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'directConnection'), 'directConnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0directConnection', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 81, 8), )


    directConnection = property(__directConnection.value, __directConnection.set, None, 'When present this element indicates that a master interface may be directly connected to a slave interface (under certain conditions) for busses of this type.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}extends uses Python identifier extends
    __extends = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'extends'), 'extends', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0extends', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 86, 8), )


    extends = property(__extends.value, __extends.set, None, 'Optional name of bus type that this bus definition is compatible with. This bus definition may change the definitions of signals in the existing bus definition and add new signals, the signals in the original bus are not deleted but may be marked illegal to disallow their use.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maxMasters uses Python identifier maxMasters
    __maxMasters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxMasters'), 'maxMasters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maxMasters', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 91, 8), )


    maxMasters = property(__maxMasters.value, __maxMasters.set, None, 'Indicates the maximum number of masters this bus supports.  Default value of zero means unbounded. ')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maxSlaves uses Python identifier maxSlaves
    __maxSlaves = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves'), 'maxSlaves', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maxSlaves', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 96, 8), )


    maxSlaves = property(__maxSlaves.value, __maxSlaves.set, None, 'Indicates the maximum number of slaves this bus supports.  Default value of zero means unbounded.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signals uses Python identifier signals
    __signals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signals'), 'signals', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signals', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 101, 8), )


    signals = property(__signals.value, __signals.set, None, 'This is a list of logical signals defined by the bus.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendor', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3), )


    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0library', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3), )


    library = property(__library.value, __library.set, None, 'Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3), )


    name = property(__name.value, __name.set, None, 'The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_3_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0version', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3), )


    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __choices.name() : __choices,
        __directConnection.name() : __directConnection,
        __extends.name() : __extends,
        __maxMasters.name() : __maxMasters,
        __maxSlaves.name() : __maxSlaves,
        __signals.name() : __signals,
        __vendorExtensions.name() : __vendorExtensions,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """This is a list of logical signals defined by the bus."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 105, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signal uses Python identifier signal
    __signal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signal'), 'signal', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_4_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signal', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 107, 14), )


    signal = property(__signal.value, __signal.set, None, None)

    _ElementMap.update({
        __signal.name() : __signal
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 108, 16)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}logicalName uses Python identifier logicalName
    __logicalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), 'logicalName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0logicalName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 110, 20), )


    logicalName = property(__logicalName.value, __logicalName.set, None, 'The assigned name of this signal in bus specifications.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}isAddress uses Python identifier isAddress
    __isAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isAddress'), 'isAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0isAddress', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 116, 22), )


    isAddress = property(__isAddress.value, __isAddress.set, None, 'If this element is present, the signal contains address information.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}isData uses Python identifier isData
    __isData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isData'), 'isData', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0isData', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 121, 22), )


    isData = property(__isData.value, __isData.set, None, 'If this element is present, the signal contains data information.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}isClock uses Python identifier isClock
    __isClock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isClock'), 'isClock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0isClock', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 126, 22), )


    isClock = property(__isClock.value, __isClock.set, None, 'If this element is present, the signal contains clock information.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}isReset uses Python identifier isReset
    __isReset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'isReset'), 'isReset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0isReset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 131, 22), )


    isReset = property(__isReset.value, __isReset.set, None, 'Is this element is present, the signal contains reset information.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}onSystem uses Python identifier onSystem
    __onSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onSystem'), 'onSystem', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0onSystem', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 138, 20), )


    onSystem = property(__onSystem.value, __onSystem.set, None, 'Defines constraints for this signal when present in a system bus interface with a matching group name.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}onMaster uses Python identifier onMaster
    __onMaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onMaster'), 'onMaster', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0onMaster', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 153, 20), )


    onMaster = property(__onMaster.value, __onMaster.set, None, 'Defines constraints for this signal when present in a master bus interface.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}onSlave uses Python identifier onSlave
    __onSlave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'onSlave'), 'onSlave', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0onSlave', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 161, 20), )


    onSlave = property(__onSlave.value, __onSlave.set, None, 'Defines constraints for this signal when present in a slave bus interface.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), 'defaultValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0defaultValue', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 169, 20), )


    defaultValue = property(__defaultValue.value, __defaultValue.set, None, 'Default value for the signal when used as an input and it ends up  being unconnected. Ignored for signals that require a singleShot or clock type driver. This value may be overridden by a defaultValue on a component pin.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}requiresDriver uses Python identifier requiresDriver
    __requiresDriver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver'), 'requiresDriver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_5_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0requiresDriver', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 125, 1), )


    requiresDriver = property(__requiresDriver.value, __requiresDriver.set, None, 'Specifies if a signal requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected')

    _ElementMap.update({
        __logicalName.name() : __logicalName,
        __isAddress.name() : __isAddress,
        __isData.name() : __isData,
        __isClock.name() : __isClock,
        __isReset.name() : __isReset,
        __onSystem.name() : __onSystem,
        __onMaster.name() : __onMaster,
        __onSlave.name() : __onSlave,
        __defaultValue.name() : __defaultValue,
        __vendorExtensions.name() : __vendorExtensions,
        __requiresDriver.name() : __requiresDriver
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this signal when present in a system bus interface with a matching group name."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 142, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitWidth uses Python identifier bitWidth
    __bitWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), 'bitWidth', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitWidth', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6), )


    bitWidth = property(__bitWidth.value, __bitWidth.set, None, 'Number of bits required to represent this signal. Absence of this element indicates unconstrained number of bits, i.e. the component will define th enumber of bits in this signal.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6), )


    direction = property(__direction.value, __direction.set, None, 'If this element is present, the direction of this signal is restricted to the specified value. The direction is relative to the non-mirrored interface.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_6_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0group', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 144, 26), )


    group = property(__group.value, __group.set, None, 'Used to group system signals into different groups within a common bus.')

    _ElementMap.update({
        __bitWidth.name() : __bitWidth,
        __direction.name() : __direction,
        __group.name() : __group
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this signal when present in a master bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 157, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitWidth uses Python identifier bitWidth
    __bitWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), 'bitWidth', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_7_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitWidth', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6), )


    bitWidth = property(__bitWidth.value, __bitWidth.set, None, 'Number of bits required to represent this signal. Absence of this element indicates unconstrained number of bits, i.e. the component will define th enumber of bits in this signal.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_7_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6), )


    direction = property(__direction.value, __direction.set, None, 'If this element is present, the direction of this signal is restricted to the specified value. The direction is relative to the non-mirrored interface.')

    _ElementMap.update({
        __bitWidth.name() : __bitWidth,
        __direction.name() : __direction
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_7 = CTD_ANON_7


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Defines constraints for this signal when present in a slave bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 165, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitWidth uses Python identifier bitWidth
    __bitWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), 'bitWidth', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_8_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitWidth', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6), )


    bitWidth = property(__bitWidth.value, __bitWidth.set, None, 'Number of bits required to represent this signal. Absence of this element indicates unconstrained number of bits, i.e. the component will define th enumber of bits in this signal.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_8_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6), )


    direction = property(__direction.value, __direction.set, None, 'If this element is present, the direction of this signal is restricted to the specified value. The direction is relative to the non-mirrored interface.')

    _ElementMap.update({
        __bitWidth.name() : __bitWidth,
        __direction.name() : __direction
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_8 = CTD_ANON_8


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Default value for the signal when used as an input and it ends up  being unconnected. Ignored for signals that require a singleShot or clock type driver. This value may be overridden by a defaultValue on a component pin."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 173, 22)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}strength uses Python identifier strength
    __strength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'strength'), 'strength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_9_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0strength', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 28, 6), )


    strength = property(__strength.value, __strength.set, None, 'The strength of the signal. "strong" (default) or "weak"')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_9_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0value', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 177, 28), )


    value_ = property(__value.value, __value.set, None, 'The value of a signal. 1 or 0 for single bit signals, unsigned numeric otherwise.')

    _ElementMap.update({
        __strength.name() : __strength,
        __value.name() : __value
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_9 = CTD_ANON_9


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """A list of bus interfaces supported by this component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 41, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busInterface uses Python identifier busInterface
    __busInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busInterface'), 'busInterface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_10_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busInterface', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 32, 1), )


    busInterface = property(__busInterface.value, __busInterface.set, None, 'Describes one of the bus interfaces supported by this component.')

    _ElementMap.update({
        __busInterface.name() : __busInterface
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_10 = CTD_ANON_10


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busInterfaceType with content type ELEMENT_ONLY
class busInterfaceType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busInterfaceType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'busInterfaceType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 47, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 49, 3), )


    name = property(__name.value, __name.set, None, 'Uniquely names this bus interface.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busType uses Python identifier busType
    __busType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busType'), 'busType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 54, 3), )


    busType = property(__busType.value, __busType.set, None, 'The bus type of this interface.  Refers to a bus description using vendor, library and name attributes.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}master uses Python identifier master
    __master = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'master'), 'master', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0master', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 60, 4), )


    master = property(__master.value, __master.set, None, 'If this element is present, the bus interface can serve as a master.  This element encapsulates additional information related to its role as master.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}slave uses Python identifier slave
    __slave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'slave'), 'slave', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0slave', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 87, 4), )


    slave = property(__slave.value, __slave.set, None, 'If this element is present, the bus interface can serve as a slave.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}system uses Python identifier system
    __system = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'system'), 'system', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0system', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 120, 4), )


    system = property(__system.value, __system.set, None, 'If this element is present, the bus interface is a system interface, neither master nor slave, with a specific function on the bus.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}mirroredSlave uses Python identifier mirroredSlave
    __mirroredSlave = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredSlave'), 'mirroredSlave', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0mirroredSlave', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 130, 4), )


    mirroredSlave = property(__mirroredSlave.value, __mirroredSlave.set, None, 'If this element is present, the bus interface represents a mirrored slave interface. All directional constraints on signals are reversed relative to the specification in the bus definition.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}mirroredMaster uses Python identifier mirroredMaster
    __mirroredMaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredMaster'), 'mirroredMaster', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0mirroredMaster', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 174, 4), )


    mirroredMaster = property(__mirroredMaster.value, __mirroredMaster.set, None, 'If this element is present, the bus interface represents a mirrored master interface. All directional constraints on signals are reversed relative to the specification in the bus definition.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}mirroredSystem uses Python identifier mirroredSystem
    __mirroredSystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mirroredSystem'), 'mirroredSystem', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0mirroredSystem', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 180, 4), )


    mirroredSystem = property(__mirroredSystem.value, __mirroredSystem.set, None, 'If this element is present, the bus interface represents a mirrored system interface. All directional constraints on signals are reversed relative to the specification in the bus definition.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}exportedInterface uses Python identifier exportedInterface
    __exportedInterface = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'exportedInterface'), 'exportedInterface', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0exportedInterface', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 190, 4), )


    exportedInterface = property(__exportedInterface.value, __exportedInterface.set, None, 'If this element is present, this interface represents an interface being exported from a sub-component. The type of interface (master, slave, ...) should be obtained from the sub-component interface.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}connection uses Python identifier connection
    __connection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'connection'), 'connection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0connection', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 210, 3), )


    connection = property(__connection.value, __connection.set, None, 'Directs how a bus interface is connected when the component is added to a design already containing a bus owner.\n\nDefault behavior is "explicit".')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signalMap uses Python identifier signalMap
    __signalMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signalMap'), 'signalMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signalMap', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 231, 3), )


    signalMap = property(__signalMap.value, __signalMap.set, None, 'Maps component signals to bus signals.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}index uses Python identifier index
    __index = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'index'), 'index', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0index', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 256, 3), )


    index = property(__index.value, __index.set, None, "Master or slave index of this bus interface's connection on a bus.  Only used on indexed buses.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitSteering uses Python identifier bitSteering
    __bitSteering = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitSteering'), 'bitSteering', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitSteering', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 269, 3), )


    bitSteering = property(__bitSteering.value, __bitSteering.set, None, 'Indicates whether bit steering should be used to map this interface onto a bus of different data width.\n\nValues are "on", "off" or "default".')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configurators uses Python identifier configurators
    __configurators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configurators'), 'configurators', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_busInterfaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configurators', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 23, 1), )


    configurators = property(__configurators.value, __configurators.set, None, "Set of configurators on a configurable object. The contents of this container element are undefined for version 1.0 of the SPIRIT schema. It is expected that the contents will be defined when the tight generator interface is available. In this release only 'default' configurators are supported.")

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({
        __name.name() : __name,
        __busType.name() : __busType,
        __master.name() : __master,
        __slave.name() : __slave,
        __system.name() : __system,
        __mirroredSlave.name() : __mirroredSlave,
        __mirroredMaster.name() : __mirroredMaster,
        __mirroredSystem.name() : __mirroredSystem,
        __exportedInterface.name() : __exportedInterface,
        __connection.name() : __connection,
        __signalMap.name() : __signalMap,
        __index.name() : __index,
        __bitSteering.name() : __bitSteering,
        __vendorExtensions.name() : __vendorExtensions,
        __configurators.name() : __configurators
    })
    _AttributeMap.update({

    })
_module_typeBindings.busInterfaceType = busInterfaceType
Namespace.addCategoryObject('typeBinding', 'busInterfaceType', busInterfaceType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface can serve as a master.  This element encapsulates additional information related to its role as master."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 64, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressSpaceRef uses Python identifier addressSpaceRef
    __addressSpaceRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), 'addressSpaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_11_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressSpaceRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 66, 7), )


    addressSpaceRef = property(__addressSpaceRef.value, __addressSpaceRef.set, None, 'If this master connects to an addressable bus, this element references the address space  it maps to.  It has an addressSpaceRef attribute which is an addrSpaceID key ref.')

    _ElementMap.update({
        __addressSpaceRef.name() : __addressSpaceRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_11 = CTD_ANON_11


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface can serve as a slave."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 91, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bridge uses Python identifier bridge
    __bridge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bridge'), 'bridge', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_12_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bridge', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 94, 7), )


    bridge = property(__bridge.value, __bridge.set, None, 'If this element is present, it indicates that the bus interface provides a bridge to another master bus interface on the same component.  It has a masterRef attribute which contains the name of the other bus interface.  It also has an opaque attribute to indicate that the bus bridge is opaque.\n\nAny slave interface can bridge to multiple master interfaces, and multiple slave interfaces can bridge to the same master interface.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetRefGroup uses Python identifier fileSetRefGroup
    __fileSetRefGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), 'fileSetRefGroup', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_12_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSetRefGroup', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 109, 7), )


    fileSetRefGroup = property(__fileSetRefGroup.value, __fileSetRefGroup.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapRef uses Python identifier memoryMapRef
    __memoryMapRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), 'memoryMapRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_12_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0memoryMapRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 318, 2), )


    memoryMapRef = property(__memoryMapRef.value, __memoryMapRef.set, None, 'References the memory map. The name of the memory map is kept in its memoryMapRef attribute.')

    _ElementMap.update({
        __bridge.name() : __bridge,
        __fileSetRefGroup.name() : __fileSetRefGroup,
        __memoryMapRef.name() : __memoryMapRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_12 = CTD_ANON_12


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, it indicates that the bus interface provides a bridge to another master bus interface on the same component.  It has a masterRef attribute which contains the name of the other bus interface.  It also has an opaque attribute to indicate that the bus bridge is opaque.

Any slave interface can bridge to multiple master interfaces, and multiple slave interfaces can bridge to the same master interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 100, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}masterRef uses Python identifier masterRef
    __masterRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'masterRef'), 'masterRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_13_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0masterRef', pyxb.binding.datatypes.Name, required=True)
    __masterRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 101, 9)
    __masterRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 101, 9)

    masterRef = property(__masterRef.value, __masterRef.set, None, 'The name of the master bus interface to which this interface bridges.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}opaque uses Python identifier opaque
    __opaque = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'opaque'), 'opaque', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_13_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0opaque', pyxb.binding.datatypes.boolean)
    __opaque._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 106, 9)
    __opaque._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 106, 9)

    opaque = property(__opaque.value, __opaque.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __masterRef.name() : __masterRef,
        __opaque.name() : __opaque
    })
_module_typeBindings.CTD_ANON_13 = CTD_ANON_13


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 110, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_14_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0group', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 112, 10), )


    group = property(__group.value, __group.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetRef uses Python identifier fileSetRef
    __fileSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), 'fileSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_14_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSetRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 302, 1), )


    fileSetRef = property(__fileSetRef.value, __fileSetRef.set, None, 'A reference to a fileSet.')

    _ElementMap.update({
        __group.name() : __group,
        __fileSetRef.name() : __fileSetRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_14 = CTD_ANON_14


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface is a system interface, neither master nor slave, with a specific function on the bus."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 124, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_15_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0group', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 292, 1), )


    group = property(__group.value, __group.set, None, 'Indicates which system interface is being mirrored. Name must match a group name present on one or more signals in the corresonding bus definition.')

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_15 = CTD_ANON_15


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored slave interface. All directional constraints on signals are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 134, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}baseAddresses uses Python identifier baseAddresses
    __baseAddresses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddresses'), 'baseAddresses', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_16_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0baseAddresses', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 136, 7), )


    baseAddresses = property(__baseAddresses.value, __baseAddresses.set, None, 'Represents a set of remap base addresses.')

    _ElementMap.update({
        __baseAddresses.name() : __baseAddresses
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_16 = CTD_ANON_16


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Represents a set of remap base addresses."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 140, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}remapAddress uses Python identifier remapAddress
    __remapAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapAddress'), 'remapAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_17_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0remapAddress', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 142, 10), )


    remapAddress = property(__remapAddress.value, __remapAddress.set, None, 'Base of an address block. The state attribute indicates the name of the remap state for which this address is valid.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_17_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0range', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 156, 10), )


    range = property(__range.value, __range.set, None, 'The address range of mirrored slave. ')

    _ElementMap.update({
        __remapAddress.name() : __remapAddress,
        __range.name() : __range
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_17 = CTD_ANON_17


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored master interface. All directional constraints on signals are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 178, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_18 = CTD_ANON_18


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, the bus interface represents a mirrored system interface. All directional constraints on signals are reversed relative to the specification in the bus definition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 184, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_19_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0group', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 292, 1), )


    group = property(__group.value, __group.set, None, 'Indicates which system interface is being mirrored. Name must match a group name present on one or more signals in the corresonding bus definition.')

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_19 = CTD_ANON_19


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """If this element is present, this interface represents an interface being exported from a sub-component. The type of interface (master, slave, ...) should be obtained from the sub-component interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 194, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_20_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 196, 7), )


    componentRef = property(__componentRef.value, __componentRef.set, None, 'Indicates name of the sub-component  containing the interface being exported. ')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}interfaceRef uses Python identifier interfaceRef
    __interfaceRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interfaceRef'), 'interfaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_20_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0interfaceRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 201, 7), )


    interfaceRef = property(__interfaceRef.value, __interfaceRef.set, None, 'Indicates the name of the sub-component bus interface being exported.')

    _ElementMap.update({
        __componentRef.name() : __componentRef,
        __interfaceRef.name() : __interfaceRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_20 = CTD_ANON_20


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Maps component signals to bus signals."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 235, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signalName uses Python identifier signalName
    __signalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signalName'), 'signalName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_21_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signalName', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 237, 6), )


    signalName = property(__signalName.value, __signalName.set, None, "Maps a component's signal to a signal in a bus description. The text content of this element identifies a signal on this component bu its signal name.  The busSignal attribute names the corresponding signal in the bus definition.\n\nThe optional attributes left and right can be used to select a bit-slice of a signal vector to map to the bus interface. ")

    _ElementMap.update({
        __signalName.name() : __signalName
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_21 = CTD_ANON_21


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Maps a component's signal to a signal in a bus description. The text content of this element identifies a signal on this component bu its signal name.  The busSignal attribute names the corresponding signal in the bus definition.

The optional attributes left and right can be used to select a bit-slice of a signal vector to map to the bus interface. """
    _TypeDefinition = pyxb.binding.datatypes.token
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 243, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.token

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busSignal uses Python identifier busSignal
    __busSignal = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'busSignal'), 'busSignal', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_22_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busSignal', pyxb.binding.datatypes.Name, required=True)
    __busSignal._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 246, 10)
    __busSignal._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 246, 10)

    busSignal = property(__busSignal.value, __busSignal.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_22_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0left', pyxb.binding.datatypes.nonNegativeInteger)
    __left._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 247, 10)
    __left._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 247, 10)

    left = property(__left.value, __left.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_22_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0right', pyxb.binding.datatypes.nonNegativeInteger)
    __right._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 248, 10)
    __right._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 248, 10)

    right = property(__right.value, __right.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __busSignal.name() : __busSignal,
        __left.name() : __left,
        __right.name() : __right
    })
_module_typeBindings.CTD_ANON_22 = CTD_ANON_22


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Lists all channel connections between mirror interfaces of this component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 301, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}channel uses Python identifier channel
    __channel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'channel'), 'channel', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_23_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0channel', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 303, 4), )


    channel = property(__channel.value, __channel.set, None, 'Defines a set of mirrored interfaces of this component that are connected to one another.')

    _ElementMap.update({
        __channel.name() : __channel
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_23 = CTD_ANON_23


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Defines a set of mirrored interfaces of this component that are connected to one another."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 307, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maxMasters uses Python identifier maxMasters
    __maxMasters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxMasters'), 'maxMasters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_24_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maxMasters', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 309, 7), )


    maxMasters = property(__maxMasters.value, __maxMasters.set, None, 'Overrides the maxMasters value in the bus definition if this number is more restrictive.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maxSlaves uses Python identifier maxSlaves
    __maxSlaves = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves'), 'maxSlaves', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_24_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maxSlaves', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 314, 7), )


    maxSlaves = property(__maxSlaves.value, __maxSlaves.set, None, 'Overrides the maxSlaves value in the bus definition if this number is more restrictive.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busInterfaceRef uses Python identifier busInterfaceRef
    __busInterfaceRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busInterfaceRef'), 'busInterfaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_24_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busInterfaceRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 319, 7), )


    busInterfaceRef = property(__busInterfaceRef.value, __busInterfaceRef.set, None, 'Contains the name of one of the bus interfaces that is part of this channel.')

    _ElementMap.update({
        __maxMasters.name() : __maxMasters,
        __maxSlaves.name() : __maxSlaves,
        __busInterfaceRef.name() : __busInterfaceRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_24 = CTD_ANON_24


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Contains a list of remap state names and associated signal values"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 338, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}remapState uses Python identifier remapState
    __remapState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapState'), 'remapState', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_25_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0remapState', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 340, 4), )


    remapState = property(__remapState.value, __remapState.set, None, 'Contains a list of signals and values which tell the decoder to enter this remap state. The name attribute identifies the name of the state')

    _ElementMap.update({
        __remapState.name() : __remapState
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_25 = CTD_ANON_25


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Contains a list of signals and values which tell the decoder to enter this remap state. The name attribute identifies the name of the state"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 344, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}remapSignal uses Python identifier remapSignal
    __remapSignal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapSignal'), 'remapSignal', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_26_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0remapSignal', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 346, 7), )


    remapSignal = property(__remapSignal.value, __remapSignal.set, None, 'Contains the name and value of a signal on the component, the value indicates the logic value which this signal must take to effect the remapping. The id attribute stores the name of the signal which takes that value.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_26_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 363, 6)
    __name._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 363, 6)

    name = property(__name.value, __name.set, None, 'Stores the name of the state')

    _ElementMap.update({
        __remapSignal.name() : __remapSignal
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.CTD_ANON_26 = CTD_ANON_26


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Contains the name and value of a signal on the component, the value indicates the logic value which this signal must take to effect the remapping. The id attribute stores the name of the signal which takes that value."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 350, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_27_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.NMTOKEN, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 353, 11)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 353, 11)

    id = property(__id.value, __id.set, None, "This attribute identifies a signal on the component which affects the component's memory layout")

    _ElementMap.update({

    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.CTD_ANON_27 = CTD_ANON_27


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}persistentDataType with content type EMPTY
class persistentDataType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}persistentDataType with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'persistentDataType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 72, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_persistentDataType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 73, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')

    _ElementMap.update({

    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.persistentDataType = persistentDataType
Namespace.addCategoryObject('typeBinding', 'persistentDataType', persistentDataType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Container for vendor specific extensions."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 79, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _HasWildcardElement = True
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_28 = CTD_ANON_28


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentType with content type ELEMENT_ONLY
class componentType (pyxb.binding.basis.complexTypeDefinition):
    """Component-specific extension to componentType"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'componentType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 28, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choices uses Python identifier choices
    __choices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'choices'), 'choices', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choices', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 210, 1), )


    choices = property(__choices.value, __choices.set, None, 'Choices used by user defined properties of spirit:formatType ="choice"')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busInterfaces uses Python identifier busInterfaces
    __busInterfaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces'), 'busInterfaces', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busInterfaces', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 37, 1), )


    busInterfaces = property(__busInterfaces.value, __busInterfaces.set, None, 'A list of bus interfaces supported by this component.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}channels uses Python identifier channels
    __channels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'channels'), 'channels', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0channels', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 297, 1), )


    channels = property(__channels.value, __channels.set, None, 'Lists all channel connections between mirror interfaces of this component.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}remapStates uses Python identifier remapStates
    __remapStates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'remapStates'), 'remapStates', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0remapStates', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 334, 1), )


    remapStates = property(__remapStates.value, __remapStates.set, None, 'Contains a list of remap state names and associated signal values')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}cpus uses Python identifier cpus
    __cpus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cpus'), 'cpus', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0cpus', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 50, 3), )


    cpus = property(__cpus.value, __cpus.set, None, "cpu's in the component")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configurators uses Python identifier configurators
    __configurators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configurators'), 'configurators', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configurators', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 23, 1), )


    configurators = property(__configurators.value, __configurators.set, None, "Set of configurators on a configurable object. The contents of this container element are undefined for version 1.0 of the SPIRIT schema. It is expected that the contents will be defined when the tight generator interface is available. In this release only 'default' configurators are supported.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSets uses Python identifier fileSets
    __fileSets = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), 'fileSets', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSets', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 312, 1), )


    fileSets = property(__fileSets.value, __fileSets.set, None, 'List of file sets associated with component.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentGenerators uses Python identifier componentGenerators
    __componentGenerators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators'), 'componentGenerators', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentGenerators', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 157, 1), )


    componentGenerators = property(__componentGenerators.value, __componentGenerators.set, None, 'List of component generators.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendor', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3), )


    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0library', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3), )


    library = property(__library.value, __library.set, None, 'Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3), )


    name = property(__name.value, __name.set, None, 'The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0version', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3), )


    version = property(__version.value, __version.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressSpaces uses Python identifier addressSpaces
    __addressSpaces = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces'), 'addressSpaces', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressSpaces', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 269, 2), )


    addressSpaces = property(__addressSpaces.value, __addressSpaces.set, None, 'If this component is a bus master, this lists all the address spaces\ndefined by the component.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMaps uses Python identifier memoryMaps
    __memoryMaps = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps'), 'memoryMaps', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0memoryMaps', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 323, 2), )


    memoryMaps = property(__memoryMaps.value, __memoryMaps.set, None, 'Lists all the slave memory maps defined by the component.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}hwModel uses Python identifier hwModel
    __hwModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hwModel'), 'hwModel', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0hwModel', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 101, 1), )


    hwModel = property(__hwModel.value, __hwModel.set, None, 'Hardware model information.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentInstances uses Python identifier componentInstances
    __componentInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), 'componentInstances', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentInstances', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 68, 1), )


    componentInstances = property(__componentInstances.value, __componentInstances.set, None, 'Sub instances of internal components.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}interconnections uses Python identifier interconnections
    __interconnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), 'interconnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_componentType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0interconnections', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 131, 1), )


    interconnections = property(__interconnections.value, __interconnections.set, None, 'Connections between internal sub components.')

    _ElementMap.update({
        __choices.name() : __choices,
        __busInterfaces.name() : __busInterfaces,
        __channels.name() : __channels,
        __remapStates.name() : __remapStates,
        __parameter.name() : __parameter,
        __vendorExtensions.name() : __vendorExtensions,
        __cpus.name() : __cpus,
        __configurators.name() : __configurators,
        __fileSets.name() : __fileSets,
        __componentGenerators.name() : __componentGenerators,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version,
        __addressSpaces.name() : __addressSpaces,
        __memoryMaps.name() : __memoryMaps,
        __hwModel.name() : __hwModel,
        __componentInstances.name() : __componentInstances,
        __interconnections.name() : __interconnections
    })
    _AttributeMap.update({

    })
_module_typeBindings.componentType = componentType
Namespace.addCategoryObject('typeBinding', 'componentType', componentType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """cpu's in the component"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 54, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}cpu uses Python identifier cpu
    __cpu = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'cpu'), 'cpu', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_29_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0cpu', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 56, 6), )


    cpu = property(__cpu.value, __cpu.set, None, 'Describes a processor in this component.')

    _ElementMap.update({
        __cpu.name() : __cpu
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_29 = CTD_ANON_29


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a processor in this component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 60, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_30_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_30_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_30_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 62, 9), )


    name = property(__name.value, __name.set, None, 'The name of the cpu instance relative to the platform core.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressSpaceRef uses Python identifier addressSpaceRef
    __addressSpaceRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), 'addressSpaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_30_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressSpaceRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 264, 2), )


    addressSpaceRef = property(__addressSpaceRef.value, __addressSpaceRef.set, None, 'References the address space.  The name of the address space is kept in its addressSpaceRef attribute.')

    _ElementMap.update({
        __parameter.name() : __parameter,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __addressSpaceRef.name() : __addressSpaceRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_30 = CTD_ANON_30


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Set of configurators on a configurable object. The contents of this container element are undefined for version 1.0 of the SPIRIT schema. It is expected that the contents will be defined when the tight generator interface is available. In this release only 'default' configurators are supported."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 27, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any)
    _HasWildcardElement = True
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_31 = CTD_ANON_31


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Root element for a platform design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 27, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendor', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3), )


    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0library', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3), )


    library = property(__library.value, __library.set, None, 'Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3), )


    name = property(__name.value, __name.set, None, 'The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0version', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3), )


    version = property(__version.value, __version.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentInstances uses Python identifier componentInstances
    __componentInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), 'componentInstances', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentInstances', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 68, 1), )


    componentInstances = property(__componentInstances.value, __componentInstances.set, None, 'Sub instances of internal components.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}adHocConnections uses Python identifier adHocConnections
    __adHocConnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections'), 'adHocConnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0adHocConnections', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 108, 1), )


    adHocConnections = property(__adHocConnections.value, __adHocConnections.set, None, 'Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}interconnections uses Python identifier interconnections
    __interconnections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), 'interconnections', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_32_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0interconnections', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 131, 1), )


    interconnections = property(__interconnections.value, __interconnections.set, None, 'Connections between internal sub components.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version,
        __componentInstances.name() : __componentInstances,
        __adHocConnections.name() : __adHocConnections,
        __interconnections.name() : __interconnections
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_32 = CTD_ANON_32


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """SPIRIT reference to a file or directory."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 28, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 30, 4), )


    name = property(__name.value, __name.set, None, 'Path to the file or directory.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}logicalName uses Python identifier logicalName
    __logicalName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), 'logicalName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0logicalName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 43, 4), )


    logicalName = property(__logicalName.value, __logicalName.set, None, 'Logical name for this file or directory e.g. VHDL library name.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}exportedName uses Python identifier exportedName
    __exportedName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'exportedName'), 'exportedName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0exportedName', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 55, 4), )


    exportedName = property(__exportedName.value, __exportedName.set, None, 'Defines exported names that can be accessed externally, e.g. exported function names from a C source file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}buildCommand uses Python identifier buildCommand
    __buildCommand = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'buildCommand'), 'buildCommand', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0buildCommand', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 60, 4), )


    buildCommand = property(__buildCommand.value, __buildCommand.set, None, 'Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}define uses Python identifier define
    __define = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'define'), 'define', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0define', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 119, 4), )


    define = property(__define.value, __define.set, None, 'Specifies define symbols that are used in the source file.  The spirit:name attribute gives the name to be defined and the text content of the element holds the value.  This element supports full configurability.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}imageType uses Python identifier imageType
    __imageType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'imageType'), 'imageType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0imageType', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 124, 4), )


    imageType = property(__imageType.value, __imageType.set, None, 'Relates the current file to a certain executable image type in the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 307, 1), )


    dependency = property(__dependency.value, __dependency.set, None, 'Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3), )


    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by SPIRIT.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0userFileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3), )


    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by SPIRIT .')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileId uses Python identifier fileId
    __fileId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'fileId'), 'fileId', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_33_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileId', pyxb.binding.datatypes.ID)
    __fileId._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 131, 3)
    __fileId._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 131, 3)

    fileId = property(__fileId.value, __fileId.set, None, None)

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __logicalName.name() : __logicalName,
        __exportedName.name() : __exportedName,
        __buildCommand.name() : __buildCommand,
        __define.name() : __define,
        __imageType.name() : __imageType,
        __dependency.name() : __dependency,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({
        __fileId.name() : __fileId
    })
_module_typeBindings.CTD_ANON_33 = CTD_ANON_33


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Logical name for this file or directory e.g. VHDL library name."""
    _TypeDefinition = pyxb.binding.datatypes.Name
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 47, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.Name

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}default uses Python identifier default
    __default = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'default'), 'default', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_34_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0default', pyxb.binding.datatypes.string)
    __default._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 50, 8)
    __default._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 50, 8)

    default = property(__default.value, __default.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __default.name() : __default
    })
_module_typeBindings.CTD_ANON_34 = CTD_ANON_34


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 64, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}command uses Python identifier command
    __command = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_35_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0command', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 66, 7), )


    command = property(__command.value, __command.set, None, 'Command used to build this file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}flags uses Python identifier flags
    __flags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'flags'), 'flags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_35_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0flags', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 78, 7), )


    flags = property(__flags.value, __flags.set, None, 'Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}replaceDefaultFlags uses Python identifier replaceDefaultFlags
    __replaceDefaultFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), 'replaceDefaultFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_35_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0replaceDefaultFlags', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 91, 7), )


    replaceDefaultFlags = property(__replaceDefaultFlags.value, __replaceDefaultFlags.set, None, 'If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}targetName uses Python identifier targetName
    __targetName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'targetName'), 'targetName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_35_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0targetName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 103, 7), )


    targetName = property(__targetName.value, __targetName.set, None, 'Pathname to the file that is derived (built) from the source file.')

    _ElementMap.update({
        __command.name() : __command,
        __flags.name() : __flags,
        __replaceDefaultFlags.name() : __replaceDefaultFlags,
        __targetName.name() : __targetName
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_35 = CTD_ANON_35


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 144, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 146, 4), )


    name = property(__name.value, __name.set, None, 'Name of the executable image file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}languageTools uses Python identifier languageTools
    __languageTools = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'languageTools'), 'languageTools', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0languageTools', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 163, 4), )


    languageTools = property(__languageTools.value, __languageTools.set, None, 'Default commands and flags for software language tools needed to build the executable image.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetRefGroup uses Python identifier fileSetRefGroup
    __fileSetRefGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), 'fileSetRefGroup', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSetRefGroup', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 286, 4), )


    fileSetRefGroup = property(__fileSetRefGroup.value, __fileSetRefGroup.set, None, 'Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 298, 3)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 298, 3)

    id = property(__id.value, __id.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}imageType uses Python identifier imageType
    __imageType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'imageType'), 'imageType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_36_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0imageType', pyxb.binding.datatypes.Name)
    __imageType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 299, 3)
    __imageType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 299, 3)

    imageType = property(__imageType.value, __imageType.set, None, None)

    _ElementMap.update({
        __parameter.name() : __parameter,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __languageTools.name() : __languageTools,
        __fileSetRefGroup.name() : __fileSetRefGroup
    })
    _AttributeMap.update({
        __id.name() : __id,
        __imageType.name() : __imageType
    })
_module_typeBindings.CTD_ANON_36 = CTD_ANON_36


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Default commands and flags for software language tools needed to build the executable image."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 167, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileBuilder uses Python identifier fileBuilder
    __fileBuilder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileBuilder'), 'fileBuilder', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_37_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileBuilder', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 169, 7), )


    fileBuilder = property(__fileBuilder.value, __fileBuilder.set, None, 'A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.  ')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}linker uses Python identifier linker
    __linker = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linker'), 'linker', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_37_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0linker', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 218, 7), )


    linker = property(__linker.value, __linker.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}linkerFlags uses Python identifier linkerFlags
    __linkerFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linkerFlags'), 'linkerFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_37_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0linkerFlags', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 227, 7), )


    linkerFlags = property(__linkerFlags.value, __linkerFlags.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}linkerCommandFile uses Python identifier linkerCommandFile
    __linkerCommandFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'linkerCommandFile'), 'linkerCommandFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_37_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0linkerCommandFile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 236, 7), )


    linkerCommandFile = property(__linkerCommandFile.value, __linkerCommandFile.set, None, 'Specifies a linker command file.')

    _ElementMap.update({
        __fileBuilder.name() : __fileBuilder,
        __linker.name() : __linker,
        __linkerFlags.name() : __linkerFlags,
        __linkerCommandFile.name() : __linkerCommandFile
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_37 = CTD_ANON_37


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.  """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 173, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_38_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}command uses Python identifier command
    __command = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_38_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0command', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 176, 10), )


    command = property(__command.value, __command.set, None, 'Default command used to build files of the specified fileType. ')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}flags uses Python identifier flags
    __flags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'flags'), 'flags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_38_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0flags', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 188, 10), )


    flags = property(__flags.value, __flags.set, None, 'Flags given to the build command when building files of this type.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}replaceDefaultFlags uses Python identifier replaceDefaultFlags
    __replaceDefaultFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), 'replaceDefaultFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_38_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0replaceDefaultFlags', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 200, 10), )


    replaceDefaultFlags = property(__replaceDefaultFlags.value, __replaceDefaultFlags.set, None, 'If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_38_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3), )


    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by SPIRIT.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_38_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0userFileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3), )


    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by SPIRIT .')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __command.name() : __command,
        __flags.name() : __flags,
        __replaceDefaultFlags.name() : __replaceDefaultFlags,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_38 = CTD_ANON_38


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies a linker command file."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 240, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_39_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 242, 10), )


    name = property(__name.value, __name.set, None, 'Linker command file name.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}commandLineSwitch uses Python identifier commandLineSwitch
    __commandLineSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'commandLineSwitch'), 'commandLineSwitch', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_39_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0commandLineSwitch', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 254, 10), )


    commandLineSwitch = property(__commandLineSwitch.value, __commandLineSwitch.set, None, 'The command line switch to specify the linker command file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}enable uses Python identifier enable
    __enable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enable'), 'enable', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_39_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0enable', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 266, 10), )


    enable = property(__enable.value, __enable.set, None, 'Specifies whether to generate and enable the linker command file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorRef uses Python identifier generatorRef
    __generatorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generatorRef'), 'generatorRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_39_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0generatorRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 480, 1), )


    generatorRef = property(__generatorRef.value, __generatorRef.set, None, 'A reference to a generator element.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configuratorRef uses Python identifier configuratorRef
    __configuratorRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configuratorRef'), 'configuratorRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_39_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configuratorRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 485, 1), )


    configuratorRef = property(__configuratorRef.value, __configuratorRef.set, None, 'A reference to a configurator element.')

    _ElementMap.update({
        __name.name() : __name,
        __commandLineSwitch.name() : __commandLineSwitch,
        __enable.name() : __enable,
        __generatorRef.name() : __generatorRef,
        __configuratorRef.name() : __configuratorRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_39 = CTD_ANON_39


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 290, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetRef uses Python identifier fileSetRef
    __fileSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), 'fileSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_40_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSetRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 302, 1), )


    fileSetRef = property(__fileSetRef.value, __fileSetRef.set, None, 'A reference to a fileSet.')

    _ElementMap.update({
        __fileSetRef.name() : __fileSetRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_40 = CTD_ANON_40


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """List of file sets associated with component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 316, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSet uses Python identifier fileSet
    __fileSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSet'), 'fileSet', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_41_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSet', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 135, 1), )


    fileSet = property(__fileSet.value, __fileSet.set, None, 'This element specifies a list of unique pathnames to files and directories. It may also include build instructions for the files. If compilation order is important, e.g. for VHDL files, the files have to be provided in compilation order.')

    _ElementMap.update({
        __fileSet.name() : __fileSet
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_41 = CTD_ANON_41


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileBuilderType with content type ELEMENT_ONLY
class fileBuilderType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileBuilderType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fileBuilderType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 322, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}command uses Python identifier command
    __command = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'command'), 'command', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0command', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 325, 3), )


    command = property(__command.value, __command.set, None, 'Default command used to build files of the specified fileType. ')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}flags uses Python identifier flags
    __flags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'flags'), 'flags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0flags', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 337, 3), )


    flags = property(__flags.value, __flags.set, None, 'Flags given to the build command when building files of this type.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}replaceDefaultFlags uses Python identifier replaceDefaultFlags
    __replaceDefaultFlags = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), 'replaceDefaultFlags', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0replaceDefaultFlags', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 349, 3), )


    replaceDefaultFlags = property(__replaceDefaultFlags.value, __replaceDefaultFlags.set, None, 'If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3), )


    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by SPIRIT.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileBuilderType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0userFileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3), )


    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by SPIRIT .')

    _ElementMap.update({
        __command.name() : __command,
        __flags.name() : __flags,
        __replaceDefaultFlags.name() : __replaceDefaultFlags,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({

    })
_module_typeBindings.fileBuilderType = fileBuilderType
Namespace.addCategoryObject('typeBinding', 'fileBuilderType', fileBuilderType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetType with content type ELEMENT_ONLY
class fileSetType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fileSetType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 365, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}file uses Python identifier file
    __file = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'file'), 'file', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0file', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 24, 1), )


    file = property(__file.value, __file.set, None, 'SPIRIT reference to a file or directory.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 307, 1), )


    dependency = property(__dependency.value, __dependency.set, None, 'Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}owner uses Python identifier owner
    __owner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'owner'), 'owner', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0owner', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 367, 3), )


    owner = property(__owner.value, __owner.set, None, 'Specifies the original owner of the fileSet, used when importing fileSets from other components, as in Hierarchical components, to allow the parent component to correctly locate files imported from subcomponents')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0group', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 372, 3), )


    group = property(__group.value, __group.set, None, 'Identifies this filleSet as belonging to a particular group or having a particular purpose. Examples might be "diagnostics", "boot", "application", "interrupt", "deviceDriver", etc.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}defaultFileBuilder uses Python identifier defaultFileBuilder
    __defaultFileBuilder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), 'defaultFileBuilder', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0defaultFileBuilder', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 378, 3), )


    defaultFileBuilder = property(__defaultFileBuilder.value, __defaultFileBuilder.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}swFunction uses Python identifier swFunction
    __swFunction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'swFunction'), 'swFunction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0swFunction', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 380, 3), )


    swFunction = property(__swFunction.value, __swFunction.set, None, 'Generator information if this file set describes a sw function. For example, this file set may describe diagnostics for which the DE can generate a diagnostics driver.\n\nThe boolean attribute "replicate", if true (default is false), directs the generator to compile a separate object module for each instance of the component in the design. Otherwise the single function will be called with different arguments for each instance (e.g. baseAddress).')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetId uses Python identifier fileSetId
    __fileSetId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'fileSetId'), 'fileSetId', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fileSetType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSetId', pyxb.binding.datatypes.NMTOKEN, required=True)
    __fileSetId._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 457, 2)
    __fileSetId._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 457, 2)

    fileSetId = property(__fileSetId.value, __fileSetId.set, None, None)

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __file.name() : __file,
        __dependency.name() : __dependency,
        __owner.name() : __owner,
        __group.name() : __group,
        __defaultFileBuilder.name() : __defaultFileBuilder,
        __swFunction.name() : __swFunction
    })
    _AttributeMap.update({
        __fileSetId.name() : __fileSetId
    })
_module_typeBindings.fileSetType = fileSetType
Namespace.addCategoryObject('typeBinding', 'fileSetType', fileSetType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Generator information if this file set describes a sw function. For example, this file set may describe diagnostics for which the DE can generate a diagnostics driver.

The boolean attribute "replicate", if true (default is false), directs the generator to compile a separate object module for each instance of the component in the design. Otherwise the single function will be called with different arguments for each instance (e.g. baseAddress)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 386, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}entryPoint uses Python identifier entryPoint
    __entryPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'entryPoint'), 'entryPoint', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0entryPoint', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 388, 6), )


    entryPoint = property(__entryPoint.value, __entryPoint.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileRef uses Python identifier fileRef
    __fileRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileRef'), 'fileRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 389, 6), )


    fileRef = property(__fileRef.value, __fileRef.set, None, 'A reference to the file that contains the entry point function.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}returnType uses Python identifier returnType
    __returnType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'returnType'), 'returnType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0returnType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 394, 6), )


    returnType = property(__returnType.value, __returnType.set, None, 'Function return type. See the enumerations.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}argument uses Python identifier argument
    __argument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'argument'), 'argument', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0argument', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 405, 6), )


    argument = property(__argument.value, __argument.set, None, 'Arguments passed in when the function is called. Arguments are passed in order.\n\nThis is an extension of the name-value pair which includes the data type in the spirit:dataType attribute.  The argument name is in the spirit:name attribute and its value is in the text content of the element.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}enabled uses Python identifier enabled
    __enabled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'enabled'), 'enabled', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0enabled', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 419, 6), )


    enabled = property(__enabled.value, __enabled.set, None, 'Specifies if the SW function is enabled. Default is true.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}sourceFile uses Python identifier sourceFile
    __sourceFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sourceFile'), 'sourceFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0sourceFile', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 431, 6), )


    sourceFile = property(__sourceFile.value, __sourceFile.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}replicate uses Python identifier replicate
    __replicate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'replicate'), 'replicate', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_42_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0replicate', pyxb.binding.datatypes.boolean)
    __replicate._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 452, 5)
    __replicate._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 452, 5)

    replicate = property(__replicate.value, __replicate.set, None, None)

    _ElementMap.update({
        __entryPoint.name() : __entryPoint,
        __fileRef.name() : __fileRef,
        __returnType.name() : __returnType,
        __argument.name() : __argument,
        __enabled.name() : __enabled,
        __sourceFile.name() : __sourceFile
    })
    _AttributeMap.update({
        __replicate.name() : __replicate
    })
_module_typeBindings.CTD_ANON_42 = CTD_ANON_42


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 432, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}sourceName uses Python identifier sourceName
    __sourceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'sourceName'), 'sourceName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_43_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0sourceName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 434, 9), )


    sourceName = property(__sourceName.value, __sourceName.set, None, 'Source file for the boot load.  Relative names are searched for in the project directory and the source of the component directory.\n    ')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileType uses Python identifier fileType
    __fileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileType'), 'fileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_43_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3), )


    fileType = property(__fileType.value, __fileType.set, None, 'Enumerated file types known by SPIRIT.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}userFileType uses Python identifier userFileType
    __userFileType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), 'userFileType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_43_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0userFileType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3), )


    userFileType = property(__userFileType.value, __userFileType.set, None, 'Free form file type, not - yet - known by SPIRIT .')

    _ElementMap.update({
        __sourceName.name() : __sourceName,
        __fileType.name() : __fileType,
        __userFileType.name() : __userFileType
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_43 = CTD_ANON_43


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 25, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileGeneratorSelector uses Python identifier fileGeneratorSelector
    __fileGeneratorSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileGeneratorSelector'), 'fileGeneratorSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileGeneratorSelector', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 29, 5), )


    fileGeneratorSelector = property(__fileGeneratorSelector.value, __fileGeneratorSelector.set, None, 'Select other generator chain files for inclusion into this chain. The boolean attribute "unique" (default false) specifies that only a single generator is valid in this context. If more that one generator is selcted based on the selection criteria, DE will prompt the user to resolve to a single generator.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentGeneratorSelector uses Python identifier componentGeneratorSelector
    __componentGeneratorSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentGeneratorSelector'), 'componentGeneratorSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentGeneratorSelector', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 45, 5), )


    componentGeneratorSelector = property(__componentGeneratorSelector.value, __componentGeneratorSelector.set, None, 'Selects generators declared in component description files of the current design for inclusion into this generator chain.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busGeneratorSelector uses Python identifier busGeneratorSelector
    __busGeneratorSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busGeneratorSelector'), 'busGeneratorSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busGeneratorSelector', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 50, 5), )


    busGeneratorSelector = property(__busGeneratorSelector.value, __busGeneratorSelector.set, None, 'Selects generators declared in bus definition files of the current design for inclusion into this generator chain.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}chainGroup uses Python identifier chainGroup
    __chainGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'chainGroup'), 'chainGroup', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0chainGroup', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 57, 4), )


    chainGroup = property(__chainGroup.value, __chainGroup.set, None, 'Identifies this generator chain as belonging to the named group. This is used by other generator chains to select this chain for programmatic inclusion.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generator uses Python identifier generator
    __generator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'generator'), 'generator', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0generator', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 66, 1), )


    generator = property(__generator.value, __generator.set, None, 'Specifies a set of generators.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendor', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3), )


    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0library', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3), )


    library = property(__library.value, __library.set, None, 'Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3), )


    name = property(__name.value, __name.set, None, 'The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_44_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0version', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3), )


    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __parameter.name() : __parameter,
        __fileGeneratorSelector.name() : __fileGeneratorSelector,
        __componentGeneratorSelector.name() : __componentGeneratorSelector,
        __busGeneratorSelector.name() : __busGeneratorSelector,
        __chainGroup.name() : __chainGroup,
        __generator.name() : __generator,
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_44 = CTD_ANON_44


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Select other generator chain files for inclusion into this chain. The boolean attribute "unique" (default false) specifies that only a single generator is valid in this context. If more that one generator is selcted based on the selection criteria, DE will prompt the user to resolve to a single generator."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 33, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileName uses Python identifier fileName
    __fileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileName'), 'fileName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_45_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 36, 8), )


    fileName = property(__fileName.value, __fileName.set, None, 'Select another generator chain using the unique identifier of this generator chain.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}groupSelector uses Python identifier groupSelector
    __groupSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), 'groupSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_45_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0groupSelector', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 88, 1), )


    groupSelector = property(__groupSelector.value, __groupSelector.set, None, 'Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}unique uses Python identifier unique
    __unique = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'unique'), 'unique', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_45_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0unique', pyxb.binding.datatypes.boolean, unicode_default='true')
    __unique._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 42, 7)
    __unique._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 42, 7)

    unique = property(__unique.value, __unique.set, None, None)

    _ElementMap.update({
        __fileName.name() : __fileName,
        __groupSelector.name() : __groupSelector
    })
    _AttributeMap.update({
        __unique.name() : __unique
    })
_module_typeBindings.CTD_ANON_45 = CTD_ANON_45


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorSelectorType with content type ELEMENT_ONLY
class generatorSelectorType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorSelectorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'generatorSelectorType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 152, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}groupSelector uses Python identifier groupSelector
    __groupSelector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), 'groupSelector', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_generatorSelectorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0groupSelector', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 88, 1), )


    groupSelector = property(__groupSelector.value, __groupSelector.set, None, 'Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).')

    _ElementMap.update({
        __groupSelector.name() : __groupSelector
    })
    _AttributeMap.update({

    })
_module_typeBindings.generatorSelectorType = generatorSelectorType
Namespace.addCategoryObject('typeBinding', 'generatorSelectorType', generatorSelectorType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """List of component generators."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 161, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentGenerator uses Python identifier componentGenerator
    __componentGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator'), 'componentGenerator', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_46_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentGenerator', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 76, 1), )


    componentGenerator = property(__componentGenerator.value, __componentGenerator.set, None, 'Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.')

    _ElementMap.update({
        __componentGenerator.name() : __componentGenerator
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_46 = CTD_ANON_46


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType with content type ELEMENT_ONLY
class generatorType (pyxb.binding.basis.complexTypeDefinition):
    """Types of generators"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'generatorType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 167, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}phase uses Python identifier phase
    __phase = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phase'), 'phase', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0phase', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 116, 1), )


    phase = property(__phase.value, __phase.set, None, 'This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 172, 3), )


    name = property(__name.value, __name.set, None, 'The name of this generator.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}accessType uses Python identifier accessType
    __accessType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'accessType'), 'accessType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0accessType', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3), )


    accessType = property(__accessType.value, __accessType.set, None, 'Identifies the special requirements that this generator may place up on the DE.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}looseGeneratorExe uses Python identifier looseGeneratorExe
    __looseGeneratorExe = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'looseGeneratorExe'), 'looseGeneratorExe', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_generatorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0looseGeneratorExe', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 227, 3), )


    looseGeneratorExe = property(__looseGeneratorExe.value, __looseGeneratorExe.set, None, 'The pathname to the executable file that implements the loose generator')

    _ElementMap.update({
        __parameter.name() : __parameter,
        __vendorExtensions.name() : __vendorExtensions,
        __phase.name() : __phase,
        __name.name() : __name,
        __accessType.name() : __accessType,
        __looseGeneratorExe.name() : __looseGeneratorExe
    })
    _AttributeMap.update({

    })
_module_typeBindings.generatorType = generatorType
Namespace.addCategoryObject('typeBinding', 'generatorType', generatorType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Identifies the special requirements that this generator may place up on the DE."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 183, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}readOnly uses Python identifier readOnly
    __readOnly = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'readOnly'), 'readOnly', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_47_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0readOnly', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 185, 6), )


    readOnly = property(__readOnly.value, __readOnly.set, None, 'If true then this generator will not make changes to the  design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}hierarchical uses Python identifier hierarchical
    __hierarchical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hierarchical'), 'hierarchical', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_47_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0hierarchical', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 190, 6), )


    hierarchical = property(__hierarchical.value, __hierarchical.set, None, 'If true then this generator is capable of running in a hierarchical manner and so the DE must ensure that all lower levels of hierarchy are also made available')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceRequired uses Python identifier instanceRequired
    __instanceRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instanceRequired'), 'instanceRequired', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_47_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0instanceRequired', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 195, 6), )


    instanceRequired = property(__instanceRequired.value, __instanceRequired.set, None, 'If true then the generator operates on designated instances, not the whole design. The DE must capture the instances to be operated on.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subsetOnly uses Python identifier subsetOnly
    __subsetOnly = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subsetOnly'), 'subsetOnly', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_47_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subsetOnly', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 200, 6), )


    subsetOnly = property(__subsetOnly.value, __subsetOnly.set, None, 'If present then this generator only needs a subset of the design information.')

    _ElementMap.update({
        __readOnly.name() : __readOnly,
        __hierarchical.name() : __hierarchical,
        __instanceRequired.name() : __instanceRequired,
        __subsetOnly.name() : __subsetOnly
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_47 = CTD_ANON_47


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """If present then this generator only needs a subset of the design information."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 204, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}designFile uses Python identifier designFile
    __designFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'designFile'), 'designFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_48_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0designFile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 206, 9), )


    designFile = property(__designFile.value, __designFile.set, None, 'If true then the generator only needs to look at design information.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentDefs uses Python identifier componentDefs
    __componentDefs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentDefs'), 'componentDefs', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_48_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentDefs', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 211, 9), )


    componentDefs = property(__componentDefs.value, __componentDefs.set, None, 'If true then the generator only needs to look at component related information.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busDefs uses Python identifier busDefs
    __busDefs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busDefs'), 'busDefs', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_48_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busDefs', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 216, 9), )


    busDefs = property(__busDefs.value, __busDefs.set, None, 'If true then the generator only needs to look at bus definition information.')

    _ElementMap.update({
        __designFile.name() : __designFile,
        __componentDefs.name() : __componentDefs,
        __busDefs.name() : __busDefs
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_48 = CTD_ANON_48


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}libraryRefType with content type EMPTY
class libraryRefType (pyxb.binding.basis.complexTypeDefinition):
    """Base SPIRIT document reference type. Contains vendor, library, name and optional version attributes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'libraryRefType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 70, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendor', pyxb.binding.datatypes.Name, required=True)
    __vendor._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 65, 2)
    __vendor._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 65, 2)

    vendor = property(__vendor.value, __vendor.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}library uses Python identifier library
    __library = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0library', pyxb.binding.datatypes.Name, required=True)
    __library._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 66, 2)
    __library._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 66, 2)

    library = property(__library.value, __library.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', pyxb.binding.datatypes.NMTOKEN, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 67, 2)
    __name._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 67, 2)

    name = property(__name.value, __name.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_libraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0version', pyxb.binding.datatypes.NMTOKEN)
    __version._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 68, 2)
    __version._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 68, 2)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
_module_typeBindings.libraryRefType = libraryRefType
Namespace.addCategoryObject('typeBinding', 'libraryRefType', libraryRefType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolvedLibraryRefType with content type SIMPLE
class resolvedLibraryRefType (pyxb.binding.basis.complexTypeDefinition):
    """Resolved SPIRIT document reference type. Contains vendor, library, name and optional version attributes and the URI of the referenced SPIRIT document"""
    _TypeDefinition = pyxb.binding.datatypes.anyURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'resolvedLibraryRefType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 76, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyURI

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendor', pyxb.binding.datatypes.Name, required=True)
    __vendor._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 65, 2)
    __vendor._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 65, 2)

    vendor = property(__vendor.value, __vendor.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}library uses Python identifier library
    __library = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0library', pyxb.binding.datatypes.Name, required=True)
    __library._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 66, 2)
    __library._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 66, 2)

    library = property(__library.value, __library.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', pyxb.binding.datatypes.NMTOKEN, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 67, 2)
    __name._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 67, 2)

    name = property(__name.value, __name.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}version uses Python identifier version
    __version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_resolvedLibraryRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0version', pyxb.binding.datatypes.NMTOKEN)
    __version._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 68, 2)
    __version._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 68, 2)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version
    })
_module_typeBindings.resolvedLibraryRefType = resolvedLibraryRefType
Namespace.addCategoryObject('typeBinding', 'resolvedLibraryRefType', resolvedLibraryRefType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Defines the changes to be made to the design as directed by an external generator."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 50, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentChanges uses Python identifier componentChanges
    __componentChanges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentChanges'), 'componentChanges', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_49_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentChanges', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 52, 4), )


    componentChanges = property(__componentChanges.value, __componentChanges.set, None, 'List of changes affecting components in the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}interconnectionChanges uses Python identifier interconnectionChanges
    __interconnectionChanges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnectionChanges'), 'interconnectionChanges', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_49_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0interconnectionChanges', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 89, 4), )


    interconnectionChanges = property(__interconnectionChanges.value, __interconnectionChanges.set, None, 'List of changes affecting interconnections in the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}adHocConnectionChanges uses Python identifier adHocConnectionChanges
    __adHocConnectionChanges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adHocConnectionChanges'), 'adHocConnectionChanges', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_49_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0adHocConnectionChanges', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 106, 4), )


    adHocConnectionChanges = property(__adHocConnectionChanges.value, __adHocConnectionChanges.set, None, 'List of changes affecting ad-hoc connections in the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensionChanges uses Python identifier vendorExtensionChanges
    __vendorExtensionChanges = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensionChanges'), 'vendorExtensionChanges', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_49_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensionChanges', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 150, 4), )


    vendorExtensionChanges = property(__vendorExtensionChanges.value, __vendorExtensionChanges.set, None, 'List of changes affecting vendor defined extensions in the design.')

    _ElementMap.update({
        __componentChanges.name() : __componentChanges,
        __interconnectionChanges.name() : __interconnectionChanges,
        __adHocConnectionChanges.name() : __adHocConnectionChanges,
        __vendorExtensionChanges.name() : __vendorExtensionChanges
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_49 = CTD_ANON_49


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """List of changes affecting components in the design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 56, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentChange uses Python identifier componentChange
    __componentChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentChange'), 'componentChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_50_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentChange', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 58, 7), )


    componentChange = property(__componentChange.value, __componentChange.set, None, None)

    _ElementMap.update({
        __componentChange.name() : __componentChange
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_50 = CTD_ANON_50


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 59, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addRemRepChange uses Python identifier addRemRepChange
    __addRemRepChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addRemRepChange'), 'addRemRepChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_51_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addRemRepChange', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 23, 1), )


    addRemRepChange = property(__addRemRepChange.value, __addRemRepChange.set, None, 'Indicates whether the alteration is an addition, removal or a replacement')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentFileName uses Python identifier componentFileName
    __componentFileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentFileName'), 'componentFileName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_51_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentFileName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 63, 10), )


    componentFileName = property(__componentFileName.value, __componentFileName.set, None, 'This is the file containing the component definition. Required only if the alteration is an addition or a replacement. Should be an absolute filename so that the DE may copy it.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subComponents uses Python identifier subComponents
    __subComponents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subComponents'), 'subComponents', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_51_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subComponents', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 68, 10), )


    subComponents = property(__subComponents.value, __subComponents.set, None, "Required only for hierarchical components. Holds the hierarchical component's sub-component definition files.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configuration uses Python identifier configuration
    __configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configuration'), 'configuration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_51_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configuration', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 23, 1), )


    configuration = property(__configuration.value, __configuration.set, None, 'All configuration information for a contained component or channel instance.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceName uses Python identifier instanceName
    __instanceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), 'instanceName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_51_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0instanceName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 47, 1), )


    instanceName = property(__instanceName.value, __instanceName.set, None, 'An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.')

    _ElementMap.update({
        __addRemRepChange.name() : __addRemRepChange,
        __componentFileName.name() : __componentFileName,
        __subComponents.name() : __subComponents,
        __configuration.name() : __configuration,
        __instanceName.name() : __instanceName
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_51 = CTD_ANON_51


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Required only for hierarchical components. Holds the hierarchical component's sub-component definition files."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 72, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subComponentFileName uses Python identifier subComponentFileName
    __subComponentFileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subComponentFileName'), 'subComponentFileName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_52_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subComponentFileName', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 74, 13), )


    subComponentFileName = property(__subComponentFileName.value, __subComponentFileName.set, None, 'Path to definitions of components and channels instanced in hierarchical component definition.')

    _ElementMap.update({
        __subComponentFileName.name() : __subComponentFileName
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_52 = CTD_ANON_52


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """List of changes affecting interconnections in the design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 93, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}interconnectionChange uses Python identifier interconnectionChange
    __interconnectionChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnectionChange'), 'interconnectionChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_53_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0interconnectionChange', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 95, 7), )


    interconnectionChange = property(__interconnectionChange.value, __interconnectionChange.set, None, None)

    _ElementMap.update({
        __interconnectionChange.name() : __interconnectionChange
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_53 = CTD_ANON_53


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 96, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addRemChange uses Python identifier addRemChange
    __addRemChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addRemChange'), 'addRemChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_54_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addRemChange', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 35, 1), )


    addRemChange = property(__addRemChange.value, __addRemChange.set, None, 'Indicates whether the alteration is an addition or a removal')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}interconnection uses Python identifier interconnection
    __interconnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), 'interconnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_54_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0interconnection', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 118, 1), )


    interconnection = property(__interconnection.value, __interconnection.set, None, 'Describes a connection from the interace of one comonent to the interface of another component through its attributes.\n\n The component1Ref and busInterface1Ref attributes indicate the instance name and bus interface name of one end of the connection. The component2Ref and busInterface2Ref attributes indicate the instance name and bus interface name of the other end of he connection. ')

    _ElementMap.update({
        __addRemChange.name() : __addRemChange,
        __interconnection.name() : __interconnection
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_54 = CTD_ANON_54


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """List of changes affecting ad-hoc connections in the design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 110, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}adHocConnectionChange uses Python identifier adHocConnectionChange
    __adHocConnectionChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adHocConnectionChange'), 'adHocConnectionChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_55_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0adHocConnectionChange', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 112, 7), )


    adHocConnectionChange = property(__adHocConnectionChange.value, __adHocConnectionChange.set, None, None)

    _ElementMap.update({
        __adHocConnectionChange.name() : __adHocConnectionChange
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_55 = CTD_ANON_55


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 113, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addRemChange uses Python identifier addRemChange
    __addRemChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addRemChange'), 'addRemChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_56_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addRemChange', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 35, 1), )


    addRemChange = property(__addRemChange.value, __addRemChange.set, None, 'Indicates whether the alteration is an addition or a removal')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_56_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 116, 10), )


    name = property(__name.value, __name.set, None, 'This is the name of the ad-hoc connection to modify')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}export uses Python identifier export
    __export = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'export'), 'export', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_56_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0export', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 121, 10), )


    export = property(__export.value, __export.set, None, 'Specifies whether this ad-hoc connection will be exported out of the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}pinReference uses Python identifier pinReference
    __pinReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinReference'), 'pinReference', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_56_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0pinReference', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 133, 10), )


    pinReference = property(__pinReference.value, __pinReference.set, None, 'Indicates the signal on the component which is being connected by this ad-hoc connection')

    _ElementMap.update({
        __addRemChange.name() : __addRemChange,
        __name.name() : __name,
        __export.name() : __export,
        __pinReference.name() : __pinReference
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_56 = CTD_ANON_56


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Indicates the signal on the component which is being connected by this ad-hoc connection"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 137, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_57_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentRef', pyxb.binding.datatypes.Name, required=True)
    __componentRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 138, 12)
    __componentRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 138, 12)

    componentRef = property(__componentRef.value, __componentRef.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signalRef uses Python identifier signalRef
    __signalRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'signalRef'), 'signalRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_57_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signalRef', pyxb.binding.datatypes.Name, required=True)
    __signalRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 139, 12)
    __signalRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 139, 12)

    signalRef = property(__signalRef.value, __signalRef.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_57_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0left', pyxb.binding.datatypes.nonNegativeInteger)
    __left._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 140, 12)
    __left._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 140, 12)

    left = property(__left.value, __left.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_57_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0right', pyxb.binding.datatypes.nonNegativeInteger)
    __right._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 141, 12)
    __right._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 141, 12)

    right = property(__right.value, __right.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __componentRef.name() : __componentRef,
        __signalRef.name() : __signalRef,
        __left.name() : __left,
        __right.name() : __right
    })
_module_typeBindings.CTD_ANON_57 = CTD_ANON_57


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """List of changes affecting vendor defined extensions in the design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 154, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensionChange uses Python identifier vendorExtensionChange
    __vendorExtensionChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensionChange'), 'vendorExtensionChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_58_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensionChange', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 156, 7), )


    vendorExtensionChange = property(__vendorExtensionChange.value, __vendorExtensionChange.set, None, None)

    _ElementMap.update({
        __vendorExtensionChange.name() : __vendorExtensionChange
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_58 = CTD_ANON_58


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 157, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addRemChange uses Python identifier addRemChange
    __addRemChange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addRemChange'), 'addRemChange', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_59_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addRemChange', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 35, 1), )


    addRemChange = property(__addRemChange.value, __addRemChange.set, None, 'Indicates whether the alteration is an addition or a removal')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __addRemChange.name() : __addRemChange
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_59 = CTD_ANON_59


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies the information required to invoke a loosely coupled generator"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 28, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}designFile uses Python identifier designFile
    __designFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'designFile'), 'designFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0designFile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 30, 4), )


    designFile = property(__designFile.value, __designFile.set, None, 'Path to description of top level design')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busDefinitionFiles uses Python identifier busDefinitionFiles
    __busDefinitionFiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busDefinitionFiles'), 'busDefinitionFiles', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busDefinitionFiles', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 35, 4), )


    busDefinitionFiles = property(__busDefinitionFiles.value, __busDefinitionFiles.set, None, 'The list of bus definition files currently in use within the design')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentDefinitionFiles uses Python identifier componentDefinitionFiles
    __componentDefinitionFiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentDefinitionFiles'), 'componentDefinitionFiles', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentDefinitionFiles', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 49, 4), )


    componentDefinitionFiles = property(__componentDefinitionFiles.value, __componentDefinitionFiles.set, None, 'The list of component definition files currently needed to define all the components within the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameters uses Python identifier parameters
    __parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameters'), 'parameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameters', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 70, 4), )


    parameters = property(__parameters.value, __parameters.set, None, 'List of values of configurable settings for this generator invocation')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}selectedInstances uses Python identifier selectedInstances
    __selectedInstances = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'selectedInstances'), 'selectedInstances', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0selectedInstances', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 80, 4), )


    selectedInstances = property(__selectedInstances.value, __selectedInstances.set, None, 'The list of instances to be worked upon by the generator, no instances selected indicates whole design')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}phaseNumber uses Python identifier phaseNumber
    __phaseNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'phaseNumber'), 'phaseNumber', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0phaseNumber', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 94, 4), )


    phaseNumber = property(__phaseNumber.value, __phaseNumber.set, None, 'The non-negative floating point phase number associated with this generator invocation')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}groupName uses Python identifier groupName
    __groupName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'groupName'), 'groupName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_60_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0groupName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 99, 4), )


    groupName = property(__groupName.value, __groupName.set, None, 'The generator group name associated with this generator invocation')

    _ElementMap.update({
        __designFile.name() : __designFile,
        __busDefinitionFiles.name() : __busDefinitionFiles,
        __componentDefinitionFiles.name() : __componentDefinitionFiles,
        __parameters.name() : __parameters,
        __selectedInstances.name() : __selectedInstances,
        __phaseNumber.name() : __phaseNumber,
        __groupName.name() : __groupName
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_60 = CTD_ANON_60


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """The list of bus definition files currently in use within the design"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 39, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busDefinitionFile uses Python identifier busDefinitionFile
    __busDefinitionFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'busDefinitionFile'), 'busDefinitionFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_61_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busDefinitionFile', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 41, 7), )


    busDefinitionFile = property(__busDefinitionFile.value, __busDefinitionFile.set, None, 'Path to a bus definition file used within design. Attributes VLNV used to indicate which bus definition this file represents.')

    _ElementMap.update({
        __busDefinitionFile.name() : __busDefinitionFile
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_61 = CTD_ANON_61


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """The list of component definition files currently needed to define all the components within the design."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 53, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentDefinitionFile uses Python identifier componentDefinitionFile
    __componentDefinitionFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentDefinitionFile'), 'componentDefinitionFile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_62_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentDefinitionFile', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 55, 7), )


    componentDefinitionFile = property(__componentDefinitionFile.value, __componentDefinitionFile.set, None, 'Path to component definition file. This component definition is the component definition as it appears in the DE; i.e. after having been transformed by any PMD info, and including any instance specific settings such as parameter values. The instanceRef attribute is the name of the instance that this file describes.')

    _ElementMap.update({
        __componentDefinitionFile.name() : __componentDefinitionFile
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_62 = CTD_ANON_62


# Complex type [anonymous] with content type MIXED
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Path to component definition file. This component definition is the component definition as it appears in the DE; i.e. after having been transformed by any PMD info, and including any instance specific settings such as parameter values. The instanceRef attribute is the name of the instance that this file describes."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 59, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceRef uses Python identifier instanceRef
    __instanceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'instanceRef'), 'instanceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_63_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0instanceRef', pyxb.binding.datatypes.string, required=True)
    __instanceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 60, 9)
    __instanceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 60, 9)

    instanceRef = property(__instanceRef.value, __instanceRef.set, None, 'Reference handle for this component definition')

    _ElementMap.update({

    })
    _AttributeMap.update({
        __instanceRef.name() : __instanceRef
    })
_module_typeBindings.CTD_ANON_63 = CTD_ANON_63


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """List of values of configurable settings for this generator invocation"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 74, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_64_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')

    _ElementMap.update({
        __parameter.name() : __parameter
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_64 = CTD_ANON_64


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """The list of instances to be worked upon by the generator, no instances selected indicates whole design"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 84, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}selectedInstance uses Python identifier selectedInstance
    __selectedInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'selectedInstance'), 'selectedInstance', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_65_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0selectedInstance', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 86, 7), )


    selectedInstance = property(__selectedInstance.value, __selectedInstance.set, None, 'Instance name of selected instance that the generator is expected to work upon. This may be a hierarchical instance name.')

    _ElementMap.update({
        __selectedInstance.name() : __selectedInstance
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_65 = CTD_ANON_65


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlockType with content type ELEMENT_ONLY
class addressBlockType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlockType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addressBlockType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 91, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0volatile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), )


    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile, default to false when not present.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0access', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2), )


    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0baseAddress', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2), )


    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address block.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitOffset uses Python identifier bitOffset
    __bitOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), 'bitOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2), )


    bitOffset = property(__bitOffset.value, __bitOffset.set, None, 'Base bit offset of an address block.  If not included, it is assumed to be 0.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0range', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6), )


    range = property(__range.value, __range.set, None, 'The address range of an address block.  Expressed as the number of addressable units accessable to the block.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0width', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6), )


    width = property(__width.value, __width.set, None, 'Bit width of an address block.  If zero or absent and this is part of a slave memory map, the width is assumed to be the data width of the slave interface.  It this is part of a local memory map, a missing width is assumed to be the effective width of the address space.  If this is part of an address space definition, a missing width is assumed to be the widest data signal of all bus interfaces that reference this address space.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0usage', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6), )


    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6), )


    parameter = property(__parameter.value, __parameter.set, None, 'Any additional parameters needed to describe this address block to the generators.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}register uses Python identifier register
    __register = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'register'), 'register', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0register', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6), )


    register = property(__register.value, __register.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', pyxb.binding.datatypes.Name)
    __name._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 97, 4)
    __name._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 97, 4)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __baseAddress.name() : __baseAddress,
        __bitOffset.name() : __bitOffset,
        __range.name() : __range,
        __width.name() : __width,
        __usage.name() : __usage,
        __parameter.name() : __parameter,
        __register.name() : __register
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.addressBlockType = addressBlockType
Namespace.addCategoryObject('typeBinding', 'addressBlockType', addressBlockType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addrSpaceRefType with content type EMPTY
class addrSpaceRefType (pyxb.binding.basis.complexTypeDefinition):
    """Base type for an element which references an address space.  Reference is kept in an attribute rather than the text value, so that the type may be extended with child elements if necessary."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addrSpaceRefType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 99, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressSpaceRef uses Python identifier addressSpaceRef
    __addressSpaceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), 'addressSpaceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addrSpaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressSpaceRef', pyxb.binding.datatypes.Name, required=True)
    __addressSpaceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 64, 2)
    __addressSpaceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 103, 4)

    addressSpaceRef = property(__addressSpaceRef.value, __addressSpaceRef.set, None, 'A reference to a unique address space.')

    _ElementMap.update({

    })
    _AttributeMap.update({
        __addressSpaceRef.name() : __addressSpaceRef
    })
_module_typeBindings.addrSpaceRefType = addrSpaceRefType
Namespace.addCategoryObject('typeBinding', 'addrSpaceRefType', addrSpaceRefType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapRefType with content type EMPTY
class memoryMapRefType (pyxb.binding.basis.complexTypeDefinition):
    """Base type for an element which references an memory map.  Reference is kept in an attribute rather than the text value, so that the type may be extended with child elements if necessary."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'memoryMapRefType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 105, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapRef uses Python identifier memoryMapRef
    __memoryMapRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), 'memoryMapRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryMapRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0memoryMapRef', pyxb.binding.datatypes.Name, required=True)
    __memoryMapRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 69, 2)
    __memoryMapRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 109, 4)

    memoryMapRef = property(__memoryMapRef.value, __memoryMapRef.set, None, 'A reference to a unique memory map.')

    _ElementMap.update({

    })
    _AttributeMap.update({
        __memoryMapRef.name() : __memoryMapRef
    })
_module_typeBindings.memoryMapRefType = memoryMapRefType
Namespace.addCategoryObject('typeBinding', 'memoryMapRefType', memoryMapRefType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bankedBlockType with content type ELEMENT_ONLY
class bankedBlockType (pyxb.binding.basis.complexTypeDefinition):
    """Address blocks inside a bank do not specify address."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankedBlockType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 118, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0volatile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), )


    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile, default to false when not present.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0access', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2), )


    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0range', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6), )


    range = property(__range.value, __range.set, None, 'The address range of an address block.  Expressed as the number of addressable units accessable to the block.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0width', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6), )


    width = property(__width.value, __width.set, None, 'Bit width of an address block.  If zero or absent and this is part of a slave memory map, the width is assumed to be the data width of the slave interface.  It this is part of a local memory map, a missing width is assumed to be the effective width of the address space.  If this is part of an address space definition, a missing width is assumed to be the widest data signal of all bus interfaces that reference this address space.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0usage', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6), )


    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6), )


    parameter = property(__parameter.value, __parameter.set, None, 'Any additional parameters needed to describe this address block to the generators.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}register uses Python identifier register
    __register = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'register'), 'register', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBlockType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0register', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6), )


    register = property(__register.value, __register.set, None, None)

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __range.name() : __range,
        __width.name() : __width,
        __usage.name() : __usage,
        __parameter.name() : __parameter,
        __register.name() : __register
    })
    _AttributeMap.update({

    })
_module_typeBindings.bankedBlockType = bankedBlockType
Namespace.addCategoryObject('typeBinding', 'bankedBlockType', bankedBlockType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bankedSubspaceType with content type ELEMENT_ONLY
class bankedSubspaceType (pyxb.binding.basis.complexTypeDefinition):
    """Subspace references inside banks do not specify an address."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankedSubspaceType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 127, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 132, 6), )


    parameter = property(__parameter.value, __parameter.set, None, 'Any parameters that may apply to the subspace reference.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}masterRef uses Python identifier masterRef
    __masterRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'masterRef'), 'masterRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedSubspaceType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0masterRef', pyxb.binding.datatypes.Name, required=True)
    __masterRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 79, 2)
    __masterRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 139, 4)

    masterRef = property(__masterRef.value, __masterRef.set, None, 'For subspaceMap elements, this attribute identifies the master that contains the address space to be mapped.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        __masterRef.name() : __masterRef
    })
_module_typeBindings.bankedSubspaceType = bankedSubspaceType
Namespace.addCategoryObject('typeBinding', 'bankedSubspaceType', bankedSubspaceType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fieldType with content type ELEMENT_ONLY
class fieldType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fieldType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'fieldType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 141, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 143, 6), )


    name = property(__name.value, __name.set, None, 'Field name.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitOffset uses Python identifier bitOffset
    __bitOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), 'bitOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 148, 6), )


    bitOffset = property(__bitOffset.value, __bitOffset.set, None, "Offset of this field's lsb from bit 0 of the register.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitWidth uses Python identifier bitWidth
    __bitWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), 'bitWidth', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitWidth', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 153, 6), )


    bitWidth = property(__bitWidth.value, __bitWidth.set, None, 'Width of the field in bits.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0description', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 159, 6), )


    description = property(__description.value, __description.set, None, 'Bit field description.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}values uses Python identifier values
    __values = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'values'), 'values', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0values', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 164, 6), )


    values = property(__values.value, __values.set, None, 'Enumerates specific values that can be assigned to the bit field.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_fieldType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0access', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2), )


    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.")

    _ElementMap.update({
        __parameter.name() : __parameter,
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __bitOffset.name() : __bitOffset,
        __bitWidth.name() : __bitWidth,
        __description.name() : __description,
        __values.name() : __values,
        __access.name() : __access
    })
    _AttributeMap.update({

    })
_module_typeBindings.fieldType = fieldType
Namespace.addCategoryObject('typeBinding', 'fieldType', fieldType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Enumerates specific values that can be assigned to the bit field."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 168, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_66_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0value', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 170, 12), )


    value_ = property(__value.value, __value.set, None, 'Enumerated bit field value.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_66_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0description', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 175, 12), )


    description = property(__description.value, __description.set, None, 'Description of a bit field value.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_66_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 180, 12), )


    name = property(__name.value, __name.set, None, 'The name of this enumerated value. This may be used as a token in generating code.')

    _ElementMap.update({
        __value.name() : __value,
        __description.name() : __description,
        __name.name() : __name
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_66 = CTD_ANON_66


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapType with content type ELEMENT_ONLY
class memoryMapType (pyxb.binding.basis.complexTypeDefinition):
    """Map of address space blocks on slave slave bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'memoryMapType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 203, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subspaceMap', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6), )


    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'Maps in an address subspace from accross a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 208, 6), )


    name = property(__name.value, __name.set, None, 'Memory map name, unique within the component. Put into a group to avoid making it a top level element')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryRemap uses Python identifier memoryRemap
    __memoryRemap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryRemap'), 'memoryRemap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0memoryRemap', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 214, 6), )


    memoryRemap = property(__memoryRemap.value, __memoryRemap.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressBlock', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 259, 2), )


    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'This is a single contiguous block of memory inside a memory map.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bank', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 346, 2), )


    bank = property(__bank.value, __bank.set, None, "Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attibute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.")

    _ElementMap.update({
        __subspaceMap.name() : __subspaceMap,
        __name.name() : __name,
        __memoryRemap.name() : __memoryRemap,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank
    })
    _AttributeMap.update({

    })
_module_typeBindings.memoryMapType = memoryMapType
Namespace.addCategoryObject('typeBinding', 'memoryMapType', memoryMapType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryRemapType with content type ELEMENT_ONLY
class memoryRemapType (pyxb.binding.basis.complexTypeDefinition):
    """Map of address space blocks on a slave bus interface in a specific remap state."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'memoryRemapType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 217, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subspaceMap', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6), )


    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'Maps in an address subspace from accross a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressBlock', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 259, 2), )


    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'This is a single contiguous block of memory inside a memory map.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bank', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 346, 2), )


    bank = property(__bank.value, __bank.set, None, "Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attibute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_memoryRemapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0state', pyxb.binding.datatypes.string, required=True)
    __state._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 222, 4)
    __state._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 222, 4)

    state = property(__state.value, __state.set, None, 'State of the component in which the memory map is active.')

    _ElementMap.update({
        __subspaceMap.name() : __subspaceMap,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank
    })
    _AttributeMap.update({
        __state.name() : __state
    })
_module_typeBindings.memoryRemapType = memoryRemapType
Namespace.addCategoryObject('typeBinding', 'memoryRemapType', memoryRemapType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}localMemoryMapType with content type ELEMENT_ONLY
class localMemoryMapType (pyxb.binding.basis.complexTypeDefinition):
    """Map of address space blocks on the local memory map of a master bus interface."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'localMemoryMapType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 228, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subspaceMap', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6), )


    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, 'Maps in an address subspace from accross a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressBlock', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 259, 2), )


    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'This is a single contiguous block of memory inside a memory map.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_localMemoryMapType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bank', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 346, 2), )


    bank = property(__bank.value, __bank.set, None, "Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attibute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.")

    _ElementMap.update({
        __subspaceMap.name() : __subspaceMap,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank
    })
    _AttributeMap.update({

    })
_module_typeBindings.localMemoryMapType = localMemoryMapType
Namespace.addCategoryObject('typeBinding', 'localMemoryMapType', localMemoryMapType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subspaceRefType with content type ELEMENT_ONLY
class subspaceRefType (pyxb.binding.basis.complexTypeDefinition):
    """Address subspace type.  Its subspaceReference attribute references the subspace from which the dimensions are taken."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'subspaceRefType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 234, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 240, 6), )


    parameter = property(__parameter.value, __parameter.set, None, 'Any parameters that may apply to the subspace reference.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0baseAddress', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2), )


    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address block.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitOffset uses Python identifier bitOffset
    __bitOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), 'bitOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2), )


    bitOffset = property(__bitOffset.value, __bitOffset.set, None, 'Base bit offset of an address block.  If not included, it is assumed to be 0.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}masterRef uses Python identifier masterRef
    __masterRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'masterRef'), 'masterRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_subspaceRefType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0masterRef', pyxb.binding.datatypes.Name, required=True)
    __masterRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 79, 2)
    __masterRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 247, 4)

    masterRef = property(__masterRef.value, __masterRef.set, None, 'For subspaceMap elements, this attribute identifies the master that contains the address space to be mapped.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __parameter.name() : __parameter,
        __baseAddress.name() : __baseAddress,
        __bitOffset.name() : __bitOffset
    })
    _AttributeMap.update({
        __masterRef.name() : __masterRef
    })
_module_typeBindings.subspaceRefType = subspaceRefType
Namespace.addCategoryObject('typeBinding', 'subspaceRefType', subspaceRefType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """If this component is a bus master, this lists all the address spaces
defined by the component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 274, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressSpace uses Python identifier addressSpace
    __addressSpace = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressSpace'), 'addressSpace', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_67_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressSpace', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 276, 8), )


    addressSpace = property(__addressSpace.value, __addressSpace.set, None, 'This defines a logical space, referenced by a bus master.')

    _ElementMap.update({
        __addressSpace.name() : __addressSpace
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_67 = CTD_ANON_67


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """This defines a logical space, referenced by a bus master."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 280, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}executableImage uses Python identifier executableImage
    __executableImage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'executableImage'), 'executableImage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0executableImage', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 140, 1), )


    executableImage = property(__executableImage.value, __executableImage.set, None, 'Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 282, 14), )


    name = property(__name.value, __name.set, None, 'The name of the address space.  Unique within the model.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}endianness uses Python identifier endianness
    __endianness = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'endianness'), 'endianness', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0endianness', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 289, 14), )


    endianness = property(__endianness.value, __endianness.set, None, 'Specifies the data storage as "big" or "little" endian.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}localMemoryMap uses Python identifier localMemoryMap
    __localMemoryMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'localMemoryMap'), 'localMemoryMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0localMemoryMap', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 301, 14), )


    localMemoryMap = property(__localMemoryMap.value, __localMemoryMap.set, None, 'Provides the local memory map of an address space.  Blocks in this memory map are accessable to master interfaces on this component that reference this address space.   They are not accessable to any external master interface.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 306, 14), )


    parameter = property(__parameter.value, __parameter.set, None, 'Data specific to this address space.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitsInLau uses Python identifier bitsInLau
    __bitsInLau = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), 'bitsInLau', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitsInLau', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 376, 2), )


    bitsInLau = property(__bitsInLau.value, __bitsInLau.set, None, 'The number of bits in the least addressable unit. The default is byte addressable (8 bits).')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'range'), 'range', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0range', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6), )


    range = property(__range.value, __range.set, None, 'The address range of an address block.  Expressed as the number of addressable units accessable to the block.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'width'), 'width', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_68_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0width', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6), )


    width = property(__width.value, __width.set, None, 'Bit width of an address block.  If zero or absent and this is part of a slave memory map, the width is assumed to be the data width of the slave interface.  It this is part of a local memory map, a missing width is assumed to be the effective width of the address space.  If this is part of an address space definition, a missing width is assumed to be the widest data signal of all bus interfaces that reference this address space.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __executableImage.name() : __executableImage,
        __name.name() : __name,
        __endianness.name() : __endianness,
        __localMemoryMap.name() : __localMemoryMap,
        __parameter.name() : __parameter,
        __bitsInLau.name() : __bitsInLau,
        __range.name() : __range,
        __width.name() : __width
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_68 = CTD_ANON_68


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Lists all the slave memory maps defined by the component."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 327, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMap uses Python identifier memoryMap
    __memoryMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'memoryMap'), 'memoryMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_69_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0memoryMap', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 329, 8), )


    memoryMap = property(__memoryMap.value, __memoryMap.set, None, "The set of address blocks a bus slave contributes to the bus' address space.")

    _ElementMap.update({
        __memoryMap.name() : __memoryMap
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_69 = CTD_ANON_69


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 484, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0volatile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), )


    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile, default to false when not present.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0access', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2), )


    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 486, 12), )


    name = property(__name.value, __name.set, None, 'Register name.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dim uses Python identifier dim
    __dim = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dim'), 'dim', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dim', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 491, 12), )


    dim = property(__dim.value, __dim.set, None, 'Dimensions a register array.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressOffset uses Python identifier addressOffset
    __addressOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), 'addressOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 496, 12), )


    addressOffset = property(__addressOffset.value, __addressOffset.set, None, 'Offset from baseAddress.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}size uses Python identifier size
    __size = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'size'), 'size', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0size', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 501, 12), )


    size = property(__size.value, __size.set, None, 'Size in bits.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 508, 12), )


    dependency = property(__dependency.value, __dependency.set, None, 'Indicates that this register has a dependency on the setting of another register.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resetValue uses Python identifier resetValue
    __resetValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'resetValue'), 'resetValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resetValue', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 537, 12), )


    resetValue = property(__resetValue.value, __resetValue.set, None, 'Register value at reset.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}field uses Python identifier field
    __field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'field'), 'field', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0field', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 542, 12), )


    field = property(__field.value, __field.set, None, 'Describes individual bit fields within the register.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'description'), 'description', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_70_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0description', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 547, 12), )


    description = property(__description.value, __description.set, None, 'Register description')

    _ElementMap.update({
        __parameter.name() : __parameter,
        __vendorExtensions.name() : __vendorExtensions,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __name.name() : __name,
        __dim.name() : __dim,
        __addressOffset.name() : __addressOffset,
        __size.name() : __size,
        __dependency.name() : __dependency,
        __resetValue.name() : __resetValue,
        __field.name() : __field,
        __description.name() : __description
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_70 = CTD_ANON_70


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Indicates that this register has a dependency on the setting of another register."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 512, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}registerRef uses Python identifier registerRef
    __registerRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'registerRef'), 'registerRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0registerRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 514, 18), )


    registerRef = property(__registerRef.value, __registerRef.set, None, 'The name of the register that enables this register.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fieldRef uses Python identifier fieldRef
    __fieldRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fieldRef'), 'fieldRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fieldRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 519, 18), )


    fieldRef = property(__fieldRef.value, __fieldRef.set, None, 'Name of the field within the register that enables this register.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0value', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 524, 18), )


    value_ = property(__value.value, __value.set, None, 'Value that the enabling field must be set to to enable this register.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}mask uses Python identifier mask
    __mask = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'mask'), 'mask', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_71_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0mask', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 529, 18), )


    mask = property(__mask.value, __mask.set, None, 'Mask to be anded with the value of the enabling field or register before comparing to the dependency value.')

    _ElementMap.update({
        __registerRef.name() : __registerRef,
        __fieldRef.name() : __fieldRef,
        __value.name() : __value,
        __mask.name() : __mask
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_71 = CTD_ANON_71


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}viewType with content type ELEMENT_ONLY
class viewType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}viewType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'viewType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 24, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1), )


    parameter = property(__parameter.value, __parameter.set, None, 'A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}fileSetRef uses Python identifier fileSetRef
    __fileSetRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), 'fileSetRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0fileSetRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 302, 1), )


    fileSetRef = property(__fileSetRef.value, __fileSetRef.set, None, 'A reference to a fileSet.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 26, 3), )


    name = property(__name.value, __name.set, None, 'Name of the view. Must be unique within a component')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}envIdentifier uses Python identifier envIdentifier
    __envIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier'), 'envIdentifier', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0envIdentifier', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 31, 3), )


    envIdentifier = property(__envIdentifier.value, __envIdentifier.set, None, 'This is a string such as "ModelsimVerilog", used to uniquely identify the hardware environment. More than one indicates that the same information applies to multiple environments.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}language uses Python identifier language
    __language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'language'), 'language', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0language', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 36, 3), )


    language = property(__language.value, __language.set, None, 'The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}modelName uses Python identifier modelName
    __modelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'modelName'), 'modelName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0modelName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 48, 3), )


    modelName = property(__modelName.value, __modelName.set, None, 'HDL-specific name to identify the model.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}defaultFileBuilder uses Python identifier defaultFileBuilder
    __defaultFileBuilder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), 'defaultFileBuilder', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_viewType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0defaultFileBuilder', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 53, 3), )


    defaultFileBuilder = property(__defaultFileBuilder.value, __defaultFileBuilder.set, None, None)

    _ElementMap.update({
        __parameter.name() : __parameter,
        __vendorExtensions.name() : __vendorExtensions,
        __fileSetRef.name() : __fileSetRef,
        __name.name() : __name,
        __envIdentifier.name() : __envIdentifier,
        __language.name() : __language,
        __modelName.name() : __modelName,
        __defaultFileBuilder.name() : __defaultFileBuilder
    })
    _AttributeMap.update({

    })
_module_typeBindings.viewType = viewType
Namespace.addCategoryObject('typeBinding', 'viewType', viewType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design."""
    _TypeDefinition = pyxb.binding.datatypes.token
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 40, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.token

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}strict uses Python identifier strict
    __strict = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'strict'), 'strict', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_72_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0strict', pyxb.binding.datatypes.boolean)
    __strict._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 43, 7)
    __strict._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 43, 7)

    strict = property(__strict.value, __strict.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __strict.name() : __strict
    })
_module_typeBindings.CTD_ANON_72 = CTD_ANON_72


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}hwModelType with content type ELEMENT_ONLY
class hwModelType (pyxb.binding.basis.complexTypeDefinition):
    """Hardware model information."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'hwModelType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 59, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_hwModelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}views uses Python identifier views
    __views = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'views'), 'views', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_hwModelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0views', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 64, 3), )


    views = property(__views.value, __views.set, None, 'View container')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signals uses Python identifier signals
    __signals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signals'), 'signals', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_hwModelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signals', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 74, 3), )


    signals = property(__signals.value, __signals.set, None, 'Signal container')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}hwParameters uses Python identifier hwParameters
    __hwParameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hwParameters'), 'hwParameters', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_hwModelType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0hwParameters', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 84, 3), )


    hwParameters = property(__hwParameters.value, __hwParameters.set, None, 'Hardware parameter name value pairs container')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __views.name() : __views,
        __signals.name() : __signals,
        __hwParameters.name() : __hwParameters
    })
    _AttributeMap.update({

    })
_module_typeBindings.hwModelType = hwModelType
Namespace.addCategoryObject('typeBinding', 'hwModelType', hwModelType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """View container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 68, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}view uses Python identifier view
    __view = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'view'), 'view', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_73_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0view', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 70, 6), )


    view = property(__view.value, __view.set, None, None)

    _ElementMap.update({
        __view.name() : __view
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_73 = CTD_ANON_73


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Signal container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 78, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signal uses Python identifier signal
    __signal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'signal'), 'signal', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_74_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signal', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 95, 1), )


    signal = property(__signal.value, __signal.set, None, 'Describes signal charateristics.')

    _ElementMap.update({
        __signal.name() : __signal
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_74 = CTD_ANON_74


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Hardware parameter name value pairs container"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 88, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}hwParameter uses Python identifier hwParameter
    __hwParameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'hwParameter'), 'hwParameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_75_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0hwParameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 90, 6), )


    hwParameter = property(__hwParameter.value, __hwParameter.set, None, 'A hardware parameter name value pair.  The name is given in an attribute.  The value is the element value. The dataType (applicable to high level modeling) is given in the dataType attribute. The name should be identical to the RTL (VHDL generic or Verilog parameter)')

    _ElementMap.update({
        __hwParameter.name() : __hwParameter
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_75 = CTD_ANON_75


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """The root element of the platform meta-data definition file. This file defines the Platform meta-data to be applied to specific IP"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 28, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendor uses Python identifier vendor
    __vendor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendor'), 'vendor', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendor', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3), )


    vendor = property(__vendor.value, __vendor.set, None, 'Name of the vendor who supplies this file.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}library uses Python identifier library
    __library = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'library'), 'library', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0library', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3), )


    library = property(__library.value, __library.set, None, 'Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3), )


    name = property(__name.value, __name.set, None, 'The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}version uses Python identifier version
    __version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'version'), 'version', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0version', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3), )


    version = property(__version.value, __version.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}appliesTo uses Python identifier appliesTo
    __appliesTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'appliesTo'), 'appliesTo', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0appliesTo', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 31, 4), )


    appliesTo = property(__appliesTo.value, __appliesTo.set, None, 'Defines the components that this pmd applies to. When the user tries to add any of those components, this pmd will be applied.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependsOn uses Python identifier dependsOn
    __dependsOn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'dependsOn'), 'dependsOn', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependsOn', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 63, 4), )


    dependsOn = property(__dependsOn.value, __dependsOn.set, None, 'Defines the components that  must exist in the current design for this pmd to apply. The pmd will only apply if an instance of each components declared in this list exists in the design. If the list is empty then this pmd file will apply unconditionaly.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}transformer uses Python identifier transformer
    __transformer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'transformer'), 'transformer', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_76_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0transformer', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 77, 4), )


    transformer = property(__transformer.value, __transformer.set, None, 'The transformer element contains references to the actual code that will make the transformation. If there are multiple elements, they will be applied in sequence. i.e., the affected component document will pass through a pipeline of transformers with each child element representing a step in a pipeline.')

    _ElementMap.update({
        __vendor.name() : __vendor,
        __library.name() : __library,
        __name.name() : __name,
        __version.name() : __version,
        __appliesTo.name() : __appliesTo,
        __dependsOn.name() : __dependsOn,
        __transformer.name() : __transformer
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_76 = CTD_ANON_76


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Defines the components that this pmd applies to. When the user tries to add any of those components, this pmd will be applied."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 35, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_77_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 37, 7), )


    componentRef = property(__componentRef.value, __componentRef.set, None, 'A vendor-library-name-version identifier used to refer to components.')

    _ElementMap.update({
        __componentRef.name() : __componentRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_77 = CTD_ANON_77


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Defines the components that  must exist in the current design for this pmd to apply. The pmd will only apply if an instance of each components declared in this list exists in the design. If the list is empty then this pmd file will apply unconditionaly."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 67, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_78_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentRef', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 69, 7), )


    componentRef = property(__componentRef.value, __componentRef.set, None, 'A vendor-library-name-version identifier used to refer to components.')

    _ElementMap.update({
        __componentRef.name() : __componentRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_78 = CTD_ANON_78


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """The transformer element contains references to the actual code that will make the transformation. If there are multiple elements, they will be applied in sequence. i.e., the affected component document will pass through a pipeline of transformers with each child element representing a step in a pipeline."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 81, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}xslt uses Python identifier xslt
    __xslt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'xslt'), 'xslt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_79_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0xslt', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 83, 7), )


    xslt = property(__xslt.value, __xslt.set, None, 'An XSLT transformer that will transform the document based on rules defined in the xsl file mentioned here.')

    _ElementMap.update({
        __xslt.name() : __xslt
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_79 = CTD_ANON_79


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """An XSLT transformer that will transform the document based on rules defined in the xsl file mentioned here."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 87, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}styleSheet uses Python identifier styleSheet
    __styleSheet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'styleSheet'), 'styleSheet', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_80_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0styleSheet', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 89, 10), )


    styleSheet = property(__styleSheet.value, __styleSheet.set, None, 'The relative path to the xsl stylesheet to be used for transformation.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_80_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 94, 10), )


    parameter = property(__parameter.value, __parameter.set, None, 'Parameters to be passed to the xslt stylesheet at run time.')

    _ElementMap.update({
        __styleSheet.name() : __styleSheet,
        __parameter.name() : __parameter
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_80 = CTD_ANON_80


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signalType with content type ELEMENT_ONLY
class signalType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signalType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'signalType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 33, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 35, 3), )


    name = property(__name.value, __name.set, None, 'The name of the signal.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 40, 3), )


    direction = property(__direction.value, __direction.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}left uses Python identifier left
    __left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0left', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 46, 4), )


    left = property(__left.value, __left.set, None, 'Left vector bound.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}right uses Python identifier right
    __right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0right', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 58, 4), )


    right = property(__right.value, __right.set, None, 'Right vector bound.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}defaultValue uses Python identifier defaultValue
    __defaultValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), 'defaultValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0defaultValue', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 72, 4), )


    defaultValue = property(__defaultValue.value, __defaultValue.set, None, 'The initial or default value on the signal.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}export uses Python identifier export
    __export = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'export'), 'export', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0export', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 80, 3), )


    export = property(__export.value, __export.set, None, 'Specifies whether a signal is to be exported out of the module.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}clockDriver uses Python identifier clockDriver
    __clockDriver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockDriver'), 'clockDriver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0clockDriver', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 23, 1), )


    clockDriver = property(__clockDriver.value, __clockDriver.set, None, 'Describes a driven clock signal.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}singleShotDriver uses Python identifier singleShotDriver
    __singleShotDriver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver'), 'singleShotDriver', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0singleShotDriver', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 80, 1), )


    singleShotDriver = property(__singleShotDriver.value, __singleShotDriver.set, None, 'Describes a driven one-shot signal.')

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __name.name() : __name,
        __direction.name() : __direction,
        __left.name() : __left,
        __right.name() : __right,
        __defaultValue.name() : __defaultValue,
        __export.name() : __export,
        __clockDriver.name() : __clockDriver,
        __singleShotDriver.name() : __singleShotDriver
    })
    _AttributeMap.update({

    })
_module_typeBindings.signalType = signalType
Namespace.addCategoryObject('typeBinding', 'signalType', signalType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a driven clock signal."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 27, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}clockPeriod uses Python identifier clockPeriod
    __clockPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod'), 'clockPeriod', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_81_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0clockPeriod', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 29, 4), )


    clockPeriod = property(__clockPeriod.value, __clockPeriod.set, None, 'Clock period in nanoseconds')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}clockPulseOffset uses Python identifier clockPulseOffset
    __clockPulseOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset'), 'clockPulseOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_81_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0clockPulseOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 41, 4), )


    clockPulseOffset = property(__clockPulseOffset.value, __clockPulseOffset.set, None, 'Time in nanoseconds until first pulse.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}clockPulseValue uses Python identifier clockPulseValue
    __clockPulseValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue'), 'clockPulseValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_81_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0clockPulseValue', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 53, 4), )


    clockPulseValue = property(__clockPulseValue.value, __clockPulseValue.set, None, 'Value of signal after first clock edge.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}clockPulseDuration uses Python identifier clockPulseDuration
    __clockPulseDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration'), 'clockPulseDuration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_81_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0clockPulseDuration', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 65, 4), )


    clockPulseDuration = property(__clockPulseDuration.value, __clockPulseDuration.set, None, 'Duration in nanoseconds of first state in cycle.')

    _ElementMap.update({
        __clockPeriod.name() : __clockPeriod,
        __clockPulseOffset.name() : __clockPulseOffset,
        __clockPulseValue.name() : __clockPulseValue,
        __clockPulseDuration.name() : __clockPulseDuration
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_81 = CTD_ANON_81


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a driven one-shot signal."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 84, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}singleShotOffset uses Python identifier singleShotOffset
    __singleShotOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotOffset'), 'singleShotOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_82_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0singleShotOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 86, 4), )


    singleShotOffset = property(__singleShotOffset.value, __singleShotOffset.set, None, 'Time in nanoseconds until start of one-shot.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}singleShotValue uses Python identifier singleShotValue
    __singleShotValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotValue'), 'singleShotValue', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_82_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0singleShotValue', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 98, 4), )


    singleShotValue = property(__singleShotValue.value, __singleShotValue.set, None, 'Value of signal after first  edge of one-shot.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}singleShotDuration uses Python identifier singleShotDuration
    __singleShotDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'singleShotDuration'), 'singleShotDuration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_82_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0singleShotDuration', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 110, 4), )


    singleShotDuration = property(__singleShotDuration.value, __singleShotDuration.set, None, 'Duration in nanoseconds of the one shot.')

    _ElementMap.update({
        __singleShotOffset.name() : __singleShotOffset,
        __singleShotValue.name() : __singleShotValue,
        __singleShotDuration.name() : __singleShotDuration
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_82 = CTD_ANON_82


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signalValueType with content type ELEMENT_ONLY
class signalValueType (pyxb.binding.basis.complexTypeDefinition):
    """Describes a signal value. The signal value can be just a value (number), a strength, or both. If the "value" is not given, it should be considered an X (unknown). A weak strength with no value given is considered Z (tristate)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'signalValueType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 145, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'value'), 'value_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalValueType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0value', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 166, 1), )


    value_ = property(__value.value, __value.set, None, 'The value of a signal.  1 or 0 for single bit signals, unsigned numeric otherwise.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}strength uses Python identifier strength
    __strength = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'strength'), 'strength', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_signalValueType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0strength', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 178, 1), )


    strength = property(__strength.value, __strength.set, None, 'The strength of the signal.  "strong" (default) or "weak".')

    _ElementMap.update({
        __value.name() : __value,
        __strength.name() : __strength
    })
    _AttributeMap.update({

    })
_module_typeBindings.signalValueType = signalValueType
Namespace.addCategoryObject('typeBinding', 'signalValueType', signalValueType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """All configuration information for a contained component or channel instance."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 27, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configurableElement uses Python identifier configurableElement
    __configurableElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configurableElement'), 'configurableElement', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_83_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configurableElement', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 33, 1), )


    configurableElement = property(__configurableElement.value, __configurableElement.set, None, 'Describes the configurable content of an element in the instance.  May contain text and/or child elements.\n\nThe required referenceId attribute refers to the ID attribute of the configurable element.')

    _ElementMap.update({
        __configurableElement.name() : __configurableElement
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_83 = CTD_ANON_83


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Component instance element.  The instance name is contained in the unique-value instanceName attribute."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 56, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configuration uses Python identifier configuration
    __configuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'configuration'), 'configuration', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configuration', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 23, 1), )


    configuration = property(__configuration.value, __configuration.set, None, 'All configuration information for a contained component or channel instance.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceName uses Python identifier instanceName
    __instanceName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), 'instanceName', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0instanceName', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 47, 1), )


    instanceName = property(__instanceName.value, __instanceName.set, None, 'An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_84_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentRef', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 59, 4), )


    componentRef = property(__componentRef.value, __componentRef.set, None, 'References a component to be found in an external library.  The name attribute gives the name of the component and the version attribute speicifies which version of the component to use.')

    _ElementMap.update({
        __configuration.name() : __configuration,
        __instanceName.name() : __instanceName,
        __componentRef.name() : __componentRef
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_84 = CTD_ANON_84


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """Sub instances of internal components."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 72, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentInstance uses Python identifier componentInstance
    __componentInstance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'componentInstance'), 'componentInstance', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_85_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentInstance', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 52, 1), )


    componentInstance = property(__componentInstance.value, __componentInstance.set, None, 'Component instance element.  The instance name is contained in the unique-value instanceName attribute.')

    _ElementMap.update({
        __componentInstance.name() : __componentInstance
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_85 = CTD_ANON_85


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """Represents an ad-hoc connection between component pins."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 82, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}export uses Python identifier export
    __export = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'export'), 'export', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0export', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 84, 4), )


    export = property(__export.value, __export.set, None, 'Specifies whether this ad-hoc connection will be exported out of the design.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}pinReference uses Python identifier pinReference
    __pinReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'pinReference'), 'pinReference', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0pinReference', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 96, 4), )


    pinReference = property(__pinReference.value, __pinReference.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_86_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 105, 3)
    __name._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 105, 3)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __export.name() : __export,
        __pinReference.name() : __pinReference
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.CTD_ANON_86 = CTD_ANON_86


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 97, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}componentRef uses Python identifier componentRef
    __componentRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), 'componentRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_87_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0componentRef', pyxb.binding.datatypes.Name, required=True)
    __componentRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 98, 6)
    __componentRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 98, 6)

    componentRef = property(__componentRef.value, __componentRef.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}signalRef uses Python identifier signalRef
    __signalRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'signalRef'), 'signalRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_87_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0signalRef', pyxb.binding.datatypes.Name, required=True)
    __signalRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 99, 6)
    __signalRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 99, 6)

    signalRef = property(__signalRef.value, __signalRef.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}left uses Python identifier left
    __left = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'left'), 'left', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_87_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0left', pyxb.binding.datatypes.nonNegativeInteger)
    __left._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 100, 6)
    __left._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 100, 6)

    left = property(__left.value, __left.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}right uses Python identifier right
    __right = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'right'), 'right', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_87_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0right', pyxb.binding.datatypes.nonNegativeInteger)
    __right._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 101, 6)
    __right._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 101, 6)

    right = property(__right.value, __right.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __componentRef.name() : __componentRef,
        __signalRef.name() : __signalRef,
        __left.name() : __left,
        __right.name() : __right
    })
_module_typeBindings.CTD_ANON_87 = CTD_ANON_87


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 112, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}adHocConnection uses Python identifier adHocConnection
    __adHocConnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection'), 'adHocConnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_88_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0adHocConnection', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 78, 1), )


    adHocConnection = property(__adHocConnection.value, __adHocConnection.set, None, 'Represents an ad-hoc connection between component pins.')

    _ElementMap.update({
        __adHocConnection.name() : __adHocConnection
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_88 = CTD_ANON_88


# Complex type [anonymous] with content type EMPTY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """Describes a connection from the interace of one comonent to the interface of another component through its attributes.

 The component1Ref and busInterface1Ref attributes indicate the instance name and bus interface name of one end of the connection. The component2Ref and busInterface2Ref attributes indicate the instance name and bus interface name of the other end of he connection. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 124, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}component1Ref uses Python identifier component1Ref
    __component1Ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'component1Ref'), 'component1Ref', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_89_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0component1Ref', pyxb.binding.datatypes.Name, required=True)
    __component1Ref._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 125, 3)
    __component1Ref._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 125, 3)

    component1Ref = property(__component1Ref.value, __component1Ref.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busInterface1Ref uses Python identifier busInterface1Ref
    __busInterface1Ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'busInterface1Ref'), 'busInterface1Ref', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_89_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busInterface1Ref', pyxb.binding.datatypes.Name, required=True)
    __busInterface1Ref._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 126, 3)
    __busInterface1Ref._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 126, 3)

    busInterface1Ref = property(__busInterface1Ref.value, __busInterface1Ref.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}component2Ref uses Python identifier component2Ref
    __component2Ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'component2Ref'), 'component2Ref', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_89_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0component2Ref', pyxb.binding.datatypes.Name, required=True)
    __component2Ref._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 127, 3)
    __component2Ref._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 127, 3)

    component2Ref = property(__component2Ref.value, __component2Ref.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}busInterface2Ref uses Python identifier busInterface2Ref
    __busInterface2Ref = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'busInterface2Ref'), 'busInterface2Ref', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_89_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0busInterface2Ref', pyxb.binding.datatypes.Name, required=True)
    __busInterface2Ref._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 128, 3)
    __busInterface2Ref._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 128, 3)

    busInterface2Ref = property(__busInterface2Ref.value, __busInterface2Ref.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __component1Ref.name() : __component1Ref,
        __busInterface1Ref.name() : __busInterface1Ref,
        __component2Ref.name() : __component2Ref,
        __busInterface2Ref.name() : __busInterface2Ref
    })
_module_typeBindings.CTD_ANON_89 = CTD_ANON_89


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """Connections between internal sub components."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 135, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}interconnection uses Python identifier interconnection
    __interconnection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), 'interconnection', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_90_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0interconnection', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 118, 1), )


    interconnection = property(__interconnection.value, __interconnection.set, None, 'Describes a connection from the interace of one comonent to the interface of another component through its attributes.\n\n The component1Ref and busInterface1Ref attributes indicate the instance name and bus interface name of one end of the connection. The component2Ref and busInterface2Ref attributes indicate the instance name and bus interface name of the other end of he connection. ')

    _ElementMap.update({
        __interconnection.name() : __interconnection
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_90 = CTD_ANON_90


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (addrSpaceRefType):
    """If this master connects to an addressable bus, this element references the address space  it maps to.  It has an addressSpaceRef attribute which is an addrSpaceID key ref."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 70, 8)
    _ElementMap = addrSpaceRefType._ElementMap.copy()
    _AttributeMap = addrSpaceRefType._AttributeMap.copy()
    # Base type is addrSpaceRefType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_91_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0baseAddress', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2), )


    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address block.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitOffset uses Python identifier bitOffset
    __bitOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), 'bitOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_91_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2), )


    bitOffset = property(__bitOffset.value, __bitOffset.set, None, 'Base bit offset of an address block.  If not included, it is assumed to be 0.')


    # Attribute addressSpaceRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addrSpaceRefType
    _ElementMap.update({
        __baseAddress.name() : __baseAddress,
        __bitOffset.name() : __bitOffset
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_91 = CTD_ANON_91


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_92 (pyxb.binding.basis.complexTypeDefinition):
    """Base of an address block. The state attribute indicates the name of the remap state for which this address is valid."""
    _TypeDefinition = spiritNumberType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 146, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritNumberType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string, unicode_default='Base Address:')
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 150, 14)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}state uses Python identifier state
    __state = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'state'), 'state', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0state', pyxb.binding.datatypes.string)
    __state._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 151, 14)
    __state._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 151, 14)

    state = property(__state.value, __state.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_92_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __state.name() : __state,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_92 = CTD_ANON_92


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """The address range of mirrored slave. """
    _TypeDefinition = spiritNumberType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 160, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritNumberType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 164, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_93_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_93 = CTD_ANON_93


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_94 (pyxb.binding.basis.complexTypeDefinition):
    """Master or slave index of this bus interface's connection on a bus.  Only used on indexed buses."""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 260, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string, unicode_default='Connection Index:')
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 264, 7)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_94_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_94 = CTD_ANON_94


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """Indicates whether bit steering should be used to map this interface onto a bus of different data width.

Values are "on", "off" or "default"."""
    _TypeDefinition = bitSteeringType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 275, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is bitSteeringType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_95_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_95 = CTD_ANON_95


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType with content type SIMPLE
class nameValuePairType (pyxb.binding.basis.complexTypeDefinition):
    """Used wherever a name value pair is appropriate.  The name is given by the attribute while the value is the element content.

Supports configurability attributes and a cross reference XPath expression."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameValuePairType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 22, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', pyxb.binding.datatypes.string, required=True)
    __name._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 30, 4)
    __name._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 30, 4)

    name = property(__name.value, __name.set, None, 'The name in a name-value pair.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}crossRef uses Python identifier crossRef
    __crossRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'crossRef'), 'crossRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0crossRef', pyxb.binding.datatypes.string)
    __crossRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 35, 4)
    __crossRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 35, 4)

    crossRef = property(__crossRef.value, __crossRef.set, None, None)


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValuePairType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __name.name() : __name,
        __crossRef.name() : __crossRef,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.nameValuePairType = nameValuePairType
Namespace.addCategoryObject('typeBinding', 'nameValuePairType', nameValuePairType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """Path to the file or directory."""
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 34, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_96_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_96 = CTD_ANON_96


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """Command used to build this file."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 70, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_97_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_97 = CTD_ANON_97


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 82, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}append uses Python identifier append_
    __append = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'append'), 'append_', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_98_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0append', pyxb.binding.datatypes.boolean)
    __append._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 85, 11)
    __append._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 85, 11)

    append_ = property(__append.value, __append.set, None, None)

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency,
        __append.name() : __append
    })
_module_typeBindings.CTD_ANON_98 = CTD_ANON_98


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 95, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_99_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_99 = CTD_ANON_99


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_100 (pyxb.binding.basis.complexTypeDefinition):
    """Pathname to the file that is derived (built) from the source file."""
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 107, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_100_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_100 = CTD_ANON_100


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_101 (pyxb.binding.basis.complexTypeDefinition):
    """Name of the executable image file."""
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 150, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_101_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_101 = CTD_ANON_101


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_102 (pyxb.binding.basis.complexTypeDefinition):
    """Default command used to build files of the specified fileType. """
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 180, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_102_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_102 = CTD_ANON_102


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_103 (pyxb.binding.basis.complexTypeDefinition):
    """Flags given to the build command when building files of this type."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 192, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_103_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_103 = CTD_ANON_103


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_104 (pyxb.binding.basis.complexTypeDefinition):
    """If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.

If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 206, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_104_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_104 = CTD_ANON_104


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_105 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 219, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_105_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_105 = CTD_ANON_105


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_106 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 228, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_106_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_106 = CTD_ANON_106


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_107 (pyxb.binding.basis.complexTypeDefinition):
    """Linker command file name."""
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 246, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_107_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_107 = CTD_ANON_107


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_108 (pyxb.binding.basis.complexTypeDefinition):
    """The command line switch to specify the linker command file."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 258, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_108_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_108 = CTD_ANON_108


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_109 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies whether to generate and enable the linker command file."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 270, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 130, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 144, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_109_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_109 = CTD_ANON_109


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_110 (pyxb.binding.basis.complexTypeDefinition):
    """Default command used to build files of the specified fileType. """
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 329, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_110_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_110 = CTD_ANON_110


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_111 (pyxb.binding.basis.complexTypeDefinition):
    """Flags given to the build command when building files of this type."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 341, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_111_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_111 = CTD_ANON_111


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_112 (pyxb.binding.basis.complexTypeDefinition):
    """If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.

If the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 355, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_112_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_112 = CTD_ANON_112


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_113 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies if the SW function is enabled. Default is true."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 423, 7)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 130, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 144, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_113_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_113 = CTD_ANON_113


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_114 (pyxb.binding.basis.complexTypeDefinition):
    """Source file for the boot load.  Relative names are searched for in the project directory and the source of the component directory.
    """
    _TypeDefinition = spiritURI
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 439, 10)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritURI

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_114_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_114 = CTD_ANON_114


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_115 (generatorType):
    """Specifies a set of generators."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 70, 2)
    _ElementMap = generatorType._ElementMap.copy()
    _AttributeMap = generatorType._AttributeMap.copy()
    # Base type is generatorType

    # Element parameter ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element phase ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}phase) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element accessType ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}accessType) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element looseGeneratorExe ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}looseGeneratorExe) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_115 = CTD_ANON_115


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_116 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 92, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'name'), 'name', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_116_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0name', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 94, 4), )


    name = property(__name.value, __name.set, None, 'Name used to select a generator or generator chain.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}multipleGroupSelectionOperator uses Python identifier multipleGroupSelectionOperator
    __multipleGroupSelectionOperator = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'multipleGroupSelectionOperator'), 'multipleGroupSelectionOperator', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_116_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0multipleGroupSelectionOperator', _module_typeBindings.STD_ANON_7, unicode_default='or')
    __multipleGroupSelectionOperator._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 100, 3)
    __multipleGroupSelectionOperator._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 100, 3)

    multipleGroupSelectionOperator = property(__multipleGroupSelectionOperator.value, __multipleGroupSelectionOperator.set, None, None)

    _ElementMap.update({
        __name.name() : __name
    })
    _AttributeMap.update({
        __multipleGroupSelectionOperator.name() : __multipleGroupSelectionOperator
    })
_module_typeBindings.CTD_ANON_116 = CTD_ANON_116


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_117 (pyxb.binding.basis.complexTypeDefinition):
    """This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements."""
    _TypeDefinition = pyxb.binding.datatypes.float
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 120, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.float

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'scope'), 'scope', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_117_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0scope', _module_typeBindings.phaseScopeType, unicode_default='global')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 123, 5)
    __scope._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 123, 5)

    scope = property(__scope.value, __scope.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __scope.name() : __scope
    })
_module_typeBindings.CTD_ANON_117 = CTD_ANON_117


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceGeneratorType with content type ELEMENT_ONLY
class instanceGeneratorType (generatorType):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceGeneratorType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'instanceGeneratorType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 128, 1)
    _ElementMap = generatorType._ElementMap.copy()
    _AttributeMap = generatorType._AttributeMap.copy()
    # Base type is generatorType

    # Element parameter ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element phase ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}phase) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}group uses Python identifier group
    __group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'group'), 'group', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_instanceGeneratorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0group', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 132, 5), )


    group = property(__group.value, __group.set, None, 'An identifier to specify the generator group. This is used by generator chains for selecting which generators to run.')


    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element accessType ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}accessType) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element looseGeneratorExe ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}looseGeneratorExe) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}scope uses Python identifier scope
    __scope = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'scope'), 'scope', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_instanceGeneratorType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0scope', _module_typeBindings.STD_ANON_8, unicode_default='instance')
    __scope._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 138, 4)
    __scope._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 138, 4)

    scope = property(__scope.value, __scope.set, None, 'The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.')

    _ElementMap.update({
        __group.name() : __group
    })
    _AttributeMap.update({
        __scope.name() : __scope
    })
_module_typeBindings.instanceGeneratorType = instanceGeneratorType
Namespace.addCategoryObject('typeBinding', 'instanceGeneratorType', instanceGeneratorType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_118 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies whether this ad-hoc connection will be exported out of the design."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 125, 11)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 130, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 144, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_118_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_118 = CTD_ANON_118


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBankType with content type ELEMENT_ONLY
class addressBankType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBankType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'addressBankType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 84, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0volatile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), )


    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile, default to false when not present.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0access', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2), )


    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}baseAddress uses Python identifier baseAddress
    __baseAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), 'baseAddress', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0baseAddress', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2), )


    baseAddress = property(__baseAddress.value, __baseAddress.set, None, 'Base of an address block.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitOffset uses Python identifier bitOffset
    __bitOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), 'bitOffset', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitOffset', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2), )


    bitOffset = property(__bitOffset.value, __bitOffset.set, None, 'Base bit offset of an address block.  If not included, it is assumed to be 0.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressBlock', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 408, 8), )


    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'An address block within the bank.  No address information is supplied.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bank', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 413, 8), )


    bank = property(__bank.value, __bank.set, None, 'A nested bank of blocks within a bank.  No address information is supplied.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subspaceMap', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 418, 8), )


    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0usage', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6), )


    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6), )


    parameter = property(__parameter.value, __parameter.set, None, 'Any additional parameters needed to describe this address block to the generators.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bankAlignment uses Python identifier bankAlignment
    __bankAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bankAlignment'), 'bankAlignment', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_addressBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bankAlignment', _module_typeBindings.bankAlignmentType, required=True)
    __bankAlignment._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 74, 2)
    __bankAlignment._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 89, 4)

    bankAlignment = property(__bankAlignment.value, __bankAlignment.set, None, "Describes whether this bank's blocks are aligned in 'parallel' or 'serial'.")

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __baseAddress.name() : __baseAddress,
        __bitOffset.name() : __bitOffset,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank,
        __subspaceMap.name() : __subspaceMap,
        __usage.name() : __usage,
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        __bankAlignment.name() : __bankAlignment
    })
_module_typeBindings.addressBankType = addressBankType
Namespace.addCategoryObject('typeBinding', 'addressBankType', addressBankType)


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bankedBankType with content type ELEMENT_ONLY
class bankedBankType (pyxb.binding.basis.complexTypeDefinition):
    """Banks nested inside a bank do not specify address."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'bankedBankType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 111, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions uses Python identifier vendorExtensions
    __vendorExtensions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), 'vendorExtensions', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0vendorExtensions', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1), )


    vendorExtensions = property(__vendorExtensions.value, __vendorExtensions.set, None, 'Container for vendor specific extensions.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}volatile uses Python identifier volatile
    __volatile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'volatile'), 'volatile', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0volatile', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), )


    volatile = property(__volatile.value, __volatile.set, None, 'Indicates whether the data is volatile, default to false when not present.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}access uses Python identifier access
    __access = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'access'), 'access', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0access', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2), )


    access = property(__access.value, __access.set, None, "Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlock uses Python identifier addressBlock
    __addressBlock = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), 'addressBlock', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0addressBlock', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 408, 8), )


    addressBlock = property(__addressBlock.value, __addressBlock.set, None, 'An address block within the bank.  No address information is supplied.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bank uses Python identifier bank
    __bank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bank'), 'bank', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bank', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 413, 8), )


    bank = property(__bank.value, __bank.set, None, 'A nested bank of blocks within a bank.  No address information is supplied.')


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subspaceMap uses Python identifier subspaceMap
    __subspaceMap = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), 'subspaceMap', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0subspaceMap', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 418, 8), )


    subspaceMap = property(__subspaceMap.value, __subspaceMap.set, None, None)


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}usage uses Python identifier usage
    __usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'usage'), 'usage', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0usage', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6), )


    usage = property(__usage.value, __usage.set, None, "Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.")


    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter uses Python identifier parameter
    __parameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'parameter'), 'parameter', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0parameter', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6), )


    parameter = property(__parameter.value, __parameter.set, None, 'Any additional parameters needed to describe this address block to the generators.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bankAlignment uses Python identifier bankAlignment
    __bankAlignment = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'bankAlignment'), 'bankAlignment', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_bankedBankType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bankAlignment', _module_typeBindings.bankAlignmentType, required=True)
    __bankAlignment._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 74, 2)
    __bankAlignment._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 116, 4)

    bankAlignment = property(__bankAlignment.value, __bankAlignment.set, None, "Describes whether this bank's blocks are aligned in 'parallel' or 'serial'.")

    _ElementMap.update({
        __vendorExtensions.name() : __vendorExtensions,
        __volatile.name() : __volatile,
        __access.name() : __access,
        __addressBlock.name() : __addressBlock,
        __bank.name() : __bank,
        __subspaceMap.name() : __subspaceMap,
        __usage.name() : __usage,
        __parameter.name() : __parameter
    })
    _AttributeMap.update({
        __bankAlignment.name() : __bankAlignment
    })
_module_typeBindings.bankedBankType = bankedBankType
Namespace.addCategoryObject('typeBinding', 'bankedBankType', bankedBankType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_119 (memoryMapType):
    """The set of address blocks a bus slave contributes to the bus' address space."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 333, 10)
    _ElementMap = memoryMapType._ElementMap.copy()
    _AttributeMap = memoryMapType._AttributeMap.copy()
    # Base type is memoryMapType

    # Element subspaceMap ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}subspaceMap) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapType

    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapType

    # Element memoryRemap ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryRemap) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapType

    # Element addressBlock ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}addressBlock) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapType

    # Element bank ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bank) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}memoryMapType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}bitsInLau uses Python identifier bitsInLau
    __bitsInLau = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), 'bitsInLau', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_119_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0bitsInLau', True, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 376, 2), )


    bitsInLau = property(__bitsInLau.value, __bitsInLau.set, None, 'The number of bits in the least addressable unit. The default is byte addressable (8 bits).')

    _ElementMap.update({
        __bitsInLau.name() : __bitsInLau
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_119 = CTD_ANON_119


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_120 (pyxb.binding.basis.complexTypeDefinition):
    """Base of an address block."""
    _TypeDefinition = spiritNumberType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 355, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritNumberType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string, unicode_default='Base Address:')
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 359, 10)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_120_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_120 = CTD_ANON_120


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_121 (pyxb.binding.basis.complexTypeDefinition):
    """Base bit offset of an address block.  If not included, it is assumed to be 0."""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 368, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 164, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_121_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_121 = CTD_ANON_121


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_122 (pyxb.binding.basis.complexTypeDefinition):
    """The address range of an address block.  Expressed as the number of addressable units accessable to the block."""
    _TypeDefinition = spiritNumberType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 435, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritNumberType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 164, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_122_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_122 = CTD_ANON_122


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_123 (pyxb.binding.basis.complexTypeDefinition):
    """Bit width of an address block.  If zero or absent and this is part of a slave memory map, the width is assumed to be the data width of the slave interface.  It this is part of a local memory map, a missing width is assumed to be the effective width of the address space.  If this is part of an address space definition, a missing width is assumed to be the widest data signal of all bus interfaces that reference this address space."""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 447, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 164, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_123_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_123 = CTD_ANON_123


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_124 (libraryRefType):
    """A vendor-library-name-version identifier used to refer to components."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 41, 8)
    _ElementMap = libraryRefType._ElementMap.copy()
    _AttributeMap = libraryRefType._AttributeMap.copy()
    # Base type is libraryRefType

    # Element {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}displayLabel uses Python identifier displayLabel
    __displayLabel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'displayLabel'), 'displayLabel', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_124_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0displayLabel', False, pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 45, 12), )


    displayLabel = property(__displayLabel.value, __displayLabel.set, None, "A display label to override the original component's display label if this 3MD will apply.")


    # Attribute vendor inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}libraryRefType

    # Attribute library inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}libraryRefType

    # Attribute name inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}libraryRefType

    # Attribute version inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}libraryRefType
    _ElementMap.update({
        __displayLabel.name() : __displayLabel
    })
    _AttributeMap.update({

    })
_module_typeBindings.CTD_ANON_124 = CTD_ANON_124


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_125 (pyxb.binding.basis.complexTypeDefinition):
    """Left vector bound."""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 50, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 164, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_125_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_125 = CTD_ANON_125


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_126 (pyxb.binding.basis.complexTypeDefinition):
    """Right vector bound."""
    _TypeDefinition = pyxb.binding.datatypes.nonNegativeInteger
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 62, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.nonNegativeInteger

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 164, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_126_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_126 = CTD_ANON_126


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_127 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies whether a signal is to be exported out of the module."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 84, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 130, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 144, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_127_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_127 = CTD_ANON_127


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_128 (pyxb.binding.basis.complexTypeDefinition):
    """Value of signal after first clock edge."""
    _TypeDefinition = spiritNumberType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 57, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritNumberType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_128_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_128 = CTD_ANON_128


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_129 (pyxb.binding.basis.complexTypeDefinition):
    """Value of signal after first  edge of one-shot."""
    _TypeDefinition = spiritNumberType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 102, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritNumberType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_129_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_129 = CTD_ANON_129


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_130 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies if a signal requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected"""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 129, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}driverType uses Python identifier driverType
    __driverType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'driverType'), 'driverType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_130_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0driverType', _module_typeBindings.STD_ANON_13, unicode_default='any')
    __driverType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 132, 5)
    __driverType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 132, 5)

    driverType = property(__driverType.value, __driverType.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __driverType.name() : __driverType
    })
_module_typeBindings.CTD_ANON_130 = CTD_ANON_130


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_131 (pyxb.binding.basis.complexTypeDefinition):
    """The value of a signal.  1 or 0 for single bit signals, unsigned numeric otherwise."""
    _TypeDefinition = spiritNumberType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 170, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is spiritNumberType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 164, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='long')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 150, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.\n\nThe long.att attribute group sets the default format to "long".')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_131_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __format.name() : __format,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_131 = CTD_ANON_131


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_132 (pyxb.binding.basis.complexTypeDefinition):
    """The strength of the signal.  "strong" (default) or "weak"."""
    _TypeDefinition = strengthType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 182, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is strengthType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_132_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_132 = CTD_ANON_132


# Complex type [anonymous] with content type MIXED
class CTD_ANON_133 (pyxb.binding.basis.complexTypeDefinition):
    """Describes the configurable content of an element in the instance.  May contain text and/or child elements.

The required referenceId attribute refers to the ID attribute of the configurable element."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_MIXED
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 39, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}referenceId uses Python identifier referenceId
    __referenceId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'referenceId'), 'referenceId', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_133_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0referenceId', pyxb.binding.datatypes.Name, required=True)
    __referenceId._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 43, 3)
    __referenceId._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 43, 3)

    referenceId = property(__referenceId.value, __referenceId.set, None, None)

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _HasWildcardElement = True
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency,
        __referenceId.name() : __referenceId
    })
_module_typeBindings.CTD_ANON_133 = CTD_ANON_133


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_134 (pyxb.binding.basis.complexTypeDefinition):
    """Specifies whether this ad-hoc connection will be exported out of the design."""
    _TypeDefinition = pyxb.binding.datatypes.boolean
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 88, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.boolean

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType, unicode_default='bool')
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 130, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 144, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_134_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_134 = CTD_ANON_134


# Complex type {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValueTypeType with content type SIMPLE
class nameValueTypeType (nameValuePairType):
    """Name value pair with data type information."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'nameValueTypeType')
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 40, 1)
    _ElementMap = nameValuePairType._ElementMap.copy()
    _AttributeMap = nameValuePairType._AttributeMap.copy()
    # Base type is nameValuePairType

    # Attribute format inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute prompt inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute minimum inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute maximum inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute rangeType inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute order inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute choiceRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute choiceStyle inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute direction inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute configGroups inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute name inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute crossRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dataType'), 'dataType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_nameValueTypeType_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dataType', pyxb.binding.datatypes.string)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 46, 4)
    __dataType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 46, 4)

    dataType = property(__dataType.value, __dataType.set, None, 'The data type of the argumen as pertains to the language. Example: "int", "double", "char *".')


    # Attribute resolve inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute id inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute dependency inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType
    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __dataType.name() : __dataType
    })
_module_typeBindings.nameValueTypeType = nameValueTypeType
Namespace.addCategoryObject('typeBinding', 'nameValueTypeType', nameValueTypeType)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_135 (nameValuePairType):
    """Arguments passed in when the function is called. Arguments are passed in order.

This is an extension of the name-value pair which includes the data type in the spirit:dataType attribute.  The argument name is in the spirit:name attribute and its value is in the text content of the element."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 411, 7)
    _ElementMap = nameValuePairType._ElementMap.copy()
    _AttributeMap = nameValuePairType._AttributeMap.copy()
    # Base type is nameValuePairType

    # Attribute format inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute prompt inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute minimum inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute maximum inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute rangeType inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute order inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute choiceRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute choiceStyle inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute direction inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute configGroups inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute name inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute crossRef inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute resolve inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute id inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute dependency inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}nameValuePairType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dataType uses Python identifier dataType
    __dataType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dataType'), 'dataType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_135_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dataType', _module_typeBindings.dataTypeType, required=True)
    __dataType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 414, 10)
    __dataType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 414, 10)

    dataType = property(__dataType.value, __dataType.set, None, None)

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __dataType.name() : __dataType
    })
_module_typeBindings.CTD_ANON_135 = CTD_ANON_135


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_136 (instanceGeneratorType):
    """Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 80, 2)
    _ElementMap = instanceGeneratorType._ElementMap.copy()
    _AttributeMap = instanceGeneratorType._AttributeMap.copy()
    # Base type is instanceGeneratorType

    # Element parameter ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}parameter) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element vendorExtensions ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}vendorExtensions) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element phase ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}phase) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element group ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}group) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceGeneratorType

    # Element name ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}name) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element accessType ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}accessType) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Element looseGeneratorExe ({http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}looseGeneratorExe) inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}generatorType

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}hidden uses Python identifier hidden
    __hidden = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'hidden'), 'hidden', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_136_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0hidden', pyxb.binding.datatypes.boolean, unicode_default='false')
    __hidden._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 83, 5)
    __hidden._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 83, 5)

    hidden = property(__hidden.value, __hidden.set, None, None)


    # Attribute scope inherited from {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}instanceGeneratorType
    _ElementMap.update({

    })
    _AttributeMap.update({
        __hidden.name() : __hidden
    })
_module_typeBindings.CTD_ANON_136 = CTD_ANON_136


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_137 (pyxb.binding.basis.complexTypeDefinition):
    """Clock period in nanoseconds"""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 33, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_137_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_137 = CTD_ANON_137


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_138 (pyxb.binding.basis.complexTypeDefinition):
    """Time in nanoseconds until first pulse."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 45, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_138_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_138 = CTD_ANON_138


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_139 (pyxb.binding.basis.complexTypeDefinition):
    """Duration in nanoseconds of first state in cycle."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 69, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_139_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_139 = CTD_ANON_139


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_140 (pyxb.binding.basis.complexTypeDefinition):
    """Time in nanoseconds until start of one-shot."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 90, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_140_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_140 = CTD_ANON_140


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_141 (pyxb.binding.basis.complexTypeDefinition):
    """Duration in nanoseconds of the one shot."""
    _TypeDefinition = configurableDouble
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 114, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is configurableDouble

    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}format uses Python identifier format
    __format = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'format'), 'format', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0format', _module_typeBindings.formatType)
    __format._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 34, 1)
    __format._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 207, 2)

    format = property(__format.value, __format.set, None, 'This is a hint to the user interface about the data format to require for user resolved properties.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}prompt uses Python identifier prompt
    __prompt = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'prompt'), 'prompt', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0prompt', pyxb.binding.datatypes.string)
    __prompt._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 39, 1)
    __prompt._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 208, 2)

    prompt = property(__prompt.value, __prompt.set, None, 'Provides a string used to prompt the user for user-resolved property values.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}minimum uses Python identifier minimum
    __minimum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'minimum'), 'minimum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0minimum', pyxb.binding.datatypes.string)
    __minimum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 44, 1)
    __minimum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 177, 2)

    minimum = property(__minimum.value, __minimum.set, None, 'For user-resolved properties with numeric values, this indicates the minimum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}maximum uses Python identifier maximum
    __maximum = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'maximum'), 'maximum', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0maximum', pyxb.binding.datatypes.string)
    __maximum._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 49, 1)
    __maximum._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 182, 2)

    maximum = property(__maximum.value, __maximum.set, None, 'For user-resolved properties with numeric values, this indicates the maximum value allowed.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}rangeType uses Python identifier rangeType
    __rangeType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'rangeType'), 'rangeType', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0rangeType', _module_typeBindings.rangeTypeType)
    __rangeType._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 66, 1)
    __rangeType._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 187, 2)

    rangeType = property(__rangeType.value, __rangeType.set, None, "Indicates the data type of the range attributes (minimum and maximum). For reasons of backward compatibility, this attribute is assumed to have the value 'double' if not present.")


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}order uses Python identifier order
    __order = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'order'), 'order', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0order', pyxb.binding.datatypes.float)
    __order._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 71, 1)
    __order._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 188, 2)

    order = property(__order.value, __order.set, None, 'For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceRef uses Python identifier choiceRef
    __choiceRef = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceRef'), 'choiceRef', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceRef', pyxb.binding.datatypes.Name)
    __choiceRef._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 76, 1)
    __choiceRef._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 193, 2)

    choiceRef = property(__choiceRef.value, __choiceRef.set, None, 'For user defined properties with a "choice" format, refers the choice element enumarating the values to choose from.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}choiceStyle uses Python identifier choiceStyle
    __choiceStyle = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'choiceStyle'), 'choiceStyle', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0choiceStyle', _module_typeBindings.STD_ANON)
    __choiceStyle._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 81, 1)
    __choiceStyle._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 198, 2)

    choiceStyle = property(__choiceStyle.value, __choiceStyle.set, None, 'For user resolved properties with a "choice" format, this indicates whether the choices should be presented as radio buttons or as a combo box.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}direction uses Python identifier direction
    __direction = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'direction'), 'direction', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0direction', _module_typeBindings.STD_ANON_)
    __direction._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 100, 1)
    __direction._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 199, 2)

    direction = property(__direction.value, __direction.set, None, 'For user resolved properties with a "choice" format and a radio button presentation style, this indicates whether the buttons should be aligned horizontally or vertically.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}configGroups uses Python identifier configGroups
    __configGroups = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'configGroups'), 'configGroups', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0configGroups', pyxb.binding.datatypes.NMTOKENS)
    __configGroups._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 119, 1)
    __configGroups._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 200, 2)

    configGroups = property(__configGroups.value, __configGroups.set, None, 'Tags configurable properties so that they may be auto-configured by different ui generators.  Can also be applied to top-level uiIcons to designate which auto-configured forms they will be added to.\n\nThis is a white-space delimited list of groups so a property may be configured by more than one configurator.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}resolve uses Python identifier resolve
    __resolve = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'resolve'), 'resolve', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0resolve', _module_typeBindings.resolveType)
    __resolve._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 48, 1)
    __resolve._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 67, 2)

    resolve = property(__resolve.value, __resolve.set, None, 'Determines how a property value is resolved.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'id'), 'id', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0id', pyxb.binding.datatypes.ID)
    __id._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 53, 1)
    __id._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 68, 2)

    id = property(__id.value, __id.set, None, 'ID attribute for uniquely identifying an element within its document.')


    # Attribute {http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0}dependency uses Python identifier dependency
    __dependency = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(Namespace, 'dependency'), 'dependency', '__httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0_CTD_ANON_141_httpwww_spiritconsortium_orgXMLSchemaSPIRIT1_0dependency', pyxb.binding.datatypes.string)
    __dependency._DeclarationLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 58, 1)
    __dependency._UseLocation = pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurable.xsd', 69, 2)

    dependency = property(__dependency.value, __dependency.set, None, 'Required on properties with a resolve = "dependent" attribute.  This is an XPath expression supplying the resultant value in terms of other properties in the component file.')

    _AttributeWildcard = pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=(pyxb.binding.content.Wildcard.NC_not, 'http://www.spiritconsortium.org/XMLSchema/SPIRIT/1.0'))
    _ElementMap.update({

    })
    _AttributeMap.update({
        __format.name() : __format,
        __prompt.name() : __prompt,
        __minimum.name() : __minimum,
        __maximum.name() : __maximum,
        __rangeType.name() : __rangeType,
        __order.name() : __order,
        __choiceRef.name() : __choiceRef,
        __choiceStyle.name() : __choiceStyle,
        __direction.name() : __direction,
        __configGroups.name() : __configGroups,
        __resolve.name() : __resolve,
        __id.name() : __id,
        __dependency.name() : __dependency
    })
_module_typeBindings.CTD_ANON_141 = CTD_ANON_141


group = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more signals in the corresonding bus definition.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 292, 1))
Namespace.addCategoryObject('elementBinding', group.name().localName(), group)

fileSetRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), pyxb.binding.datatypes.NMTOKEN, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 302, 1))
Namespace.addCategoryObject('elementBinding', fileSetRef.name().localName(), fileSetRef)

generatorRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorRef'), pyxb.binding.datatypes.string, documentation='A reference to a generator element.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 480, 1))
Namespace.addCategoryObject('elementBinding', generatorRef.name().localName(), generatorRef)

configuratorRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configuratorRef'), pyxb.binding.datatypes.string, documentation='A reference to a configurator element.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 485, 1))
Namespace.addCategoryObject('elementBinding', configuratorRef.name().localName(), configuratorRef)

volatile = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, documentation='Indicates whether the data is volatile, default to false when not present.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), unicode_default='false')
Namespace.addCategoryObject('elementBinding', volatile.name().localName(), volatile)

bitsInLau = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), pyxb.binding.datatypes.positiveInteger, documentation='The number of bits in the least addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 376, 2))
Namespace.addCategoryObject('elementBinding', bitsInLau.name().localName(), bitsInLau)

instanceName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), pyxb.binding.datatypes.Name, documentation='An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 47, 1))
Namespace.addCategoryObject('elementBinding', instanceName.name().localName(), instanceName)

choices = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choices'), CTD_ANON, documentation='Choices used by user defined properties of spirit:formatType ="choice"', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 210, 1))
Namespace.addCategoryObject('elementBinding', choices.name().localName(), choices)

busDefinition = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busDefinition'), CTD_ANON_3, documentation='Defines the signals and high-level function of a bus.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 74, 2))
Namespace.addCategoryObject('elementBinding', busDefinition.name().localName(), busDefinition)

busInterface = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterface'), busInterfaceType, documentation='Describes one of the bus interfaces supported by this component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 32, 1))
Namespace.addCategoryObject('elementBinding', busInterface.name().localName(), busInterface)

busInterfaces = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces'), CTD_ANON_10, documentation='A list of bus interfaces supported by this component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 37, 1))
Namespace.addCategoryObject('elementBinding', busInterfaces.name().localName(), busInterfaces)

channels = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channels'), CTD_ANON_23, documentation='Lists all channel connections between mirror interfaces of this component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 297, 1))
Namespace.addCategoryObject('elementBinding', channels.name().localName(), channels)

remapStates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapStates'), CTD_ANON_25, documentation='Contains a list of remap state names and associated signal values', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 334, 1))
Namespace.addCategoryObject('elementBinding', remapStates.name().localName(), remapStates)

persistentInstanceData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'persistentInstanceData'), persistentDataType, documentation='A container for any data that is specific to this instance of the design object. The contents are not interpreted or validated by the Design Environment. This element will be saved with the design and restored when the design is loaded. It is indended to be used by generators to store and retrieve instance specific data.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 54, 1))
Namespace.addCategoryObject('elementBinding', persistentInstanceData.name().localName(), persistentInstanceData)

vendorExtensions = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1))
Namespace.addCategoryObject('elementBinding', vendorExtensions.name().localName(), vendorExtensions)

component = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'component'), componentType, documentation='This is the root element for all non platform-core components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 88, 1))
Namespace.addCategoryObject('elementBinding', component.name().localName(), component)

configurators = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurators'), CTD_ANON_31, documentation="Set of configurators on a configurable object. The contents of this container element are undefined for version 1.0 of the SPIRIT schema. It is expected that the contents will be defined when the tight generator interface is available. In this release only 'default' configurators are supported.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 23, 1))
Namespace.addCategoryObject('elementBinding', configurators.name().localName(), configurators)

design = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'design'), CTD_ANON_32, documentation='Root element for a platform design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 23, 1))
Namespace.addCategoryObject('elementBinding', design.name().localName(), design)

file = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'file'), CTD_ANON_33, documentation='SPIRIT reference to a file or directory.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 24, 1))
Namespace.addCategoryObject('elementBinding', file.name().localName(), file)

fileSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSet'), fileSetType, documentation='This element specifies a list of unique pathnames to files and directories. It may also include build instructions for the files. If compilation order is important, e.g. for VHDL files, the files have to be provided in compilation order.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 135, 1))
Namespace.addCategoryObject('elementBinding', fileSet.name().localName(), fileSet)

executableImage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'executableImage'), CTD_ANON_36, documentation='Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 140, 1))
Namespace.addCategoryObject('elementBinding', executableImage.name().localName(), executableImage)

dependency = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependency'), spiritURI, documentation='Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 307, 1))
Namespace.addCategoryObject('elementBinding', dependency.name().localName(), dependency)

fileSets = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), CTD_ANON_41, documentation='List of file sets associated with component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 312, 1))
Namespace.addCategoryObject('elementBinding', fileSets.name().localName(), fileSets)

generatorChain = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorChain'), CTD_ANON_44, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 24, 1))
Namespace.addCategoryObject('elementBinding', generatorChain.name().localName(), generatorChain)

componentGenerators = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators'), CTD_ANON_46, documentation='List of component generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 157, 1))
Namespace.addCategoryObject('elementBinding', componentGenerators.name().localName(), componentGenerators)

addRemRepChange = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addRemRepChange'), STD_ANON_9, documentation='Indicates whether the alteration is an addition, removal or a replacement', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 23, 1))
Namespace.addCategoryObject('elementBinding', addRemRepChange.name().localName(), addRemRepChange)

addRemChange = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addRemChange'), STD_ANON_10, documentation='Indicates whether the alteration is an addition or a removal', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 35, 1))
Namespace.addCategoryObject('elementBinding', addRemChange.name().localName(), addRemChange)

generatorChangeList = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorChangeList'), CTD_ANON_49, documentation='Defines the changes to be made to the design as directed by an external generator.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 46, 1))
Namespace.addCategoryObject('elementBinding', generatorChangeList.name().localName(), generatorChangeList)

looseGeneratorInvocation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'looseGeneratorInvocation'), CTD_ANON_60, documentation='Specifies the information required to invoke a loosely coupled generator', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 24, 1))
Namespace.addCategoryObject('elementBinding', looseGeneratorInvocation.name().localName(), looseGeneratorInvocation)

access = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), accessType, documentation="Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2))
Namespace.addCategoryObject('elementBinding', access.name().localName(), access)

addressBlock = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 259, 2))
Namespace.addCategoryObject('elementBinding', addressBlock.name().localName(), addressBlock)

addressSpaceRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), addrSpaceRefType, documentation='References the address space.  The name of the address space is kept in its addressSpaceRef attribute.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 264, 2))
Namespace.addCategoryObject('elementBinding', addressSpaceRef.name().localName(), addressSpaceRef)

addressSpaces = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces'), CTD_ANON_67, documentation='If this component is a bus master, this lists all the address spaces\ndefined by the component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 269, 2))
Namespace.addCategoryObject('elementBinding', addressSpaces.name().localName(), addressSpaces)

memoryMapRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), memoryMapRefType, documentation='References the memory map. The name of the memory map is kept in its memoryMapRef attribute.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 318, 2))
Namespace.addCategoryObject('elementBinding', memoryMapRef.name().localName(), memoryMapRef)

memoryMaps = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps'), CTD_ANON_69, documentation='Lists all the slave memory maps defined by the component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 323, 2))
Namespace.addCategoryObject('elementBinding', memoryMaps.name().localName(), memoryMaps)

hwModel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hwModel'), hwModelType, documentation='Hardware model information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 101, 1))
Namespace.addCategoryObject('elementBinding', hwModel.name().localName(), hwModel)

pmd = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pmd'), CTD_ANON_76, documentation='The root element of the platform meta-data definition file. This file defines the Platform meta-data to be applied to specific IP', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 24, 1))
Namespace.addCategoryObject('elementBinding', pmd.name().localName(), pmd)

signal = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signal'), signalType, documentation='Describes signal charateristics.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 95, 1))
Namespace.addCategoryObject('elementBinding', signal.name().localName(), signal)

clockDriver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockDriver'), CTD_ANON_81, documentation='Describes a driven clock signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 23, 1))
Namespace.addCategoryObject('elementBinding', clockDriver.name().localName(), clockDriver)

singleShotDriver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver'), CTD_ANON_82, documentation='Describes a driven one-shot signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 80, 1))
Namespace.addCategoryObject('elementBinding', singleShotDriver.name().localName(), singleShotDriver)

configuration = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configuration'), CTD_ANON_83, documentation='All configuration information for a contained component or channel instance.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 23, 1))
Namespace.addCategoryObject('elementBinding', configuration.name().localName(), configuration)

componentInstance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstance'), CTD_ANON_84, documentation='Component instance element.  The instance name is contained in the unique-value instanceName attribute.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 52, 1))
Namespace.addCategoryObject('elementBinding', componentInstance.name().localName(), componentInstance)

componentInstances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), CTD_ANON_85, documentation='Sub instances of internal components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 68, 1))
Namespace.addCategoryObject('elementBinding', componentInstances.name().localName(), componentInstances)

adHocConnection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection'), CTD_ANON_86, documentation='Represents an ad-hoc connection between component pins.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 78, 1))
Namespace.addCategoryObject('elementBinding', adHocConnection.name().localName(), adHocConnection)

adHocConnections = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections'), CTD_ANON_88, documentation='Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 108, 1))
Namespace.addCategoryObject('elementBinding', adHocConnections.name().localName(), adHocConnections)

interconnection = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), CTD_ANON_89, documentation='Describes a connection from the interace of one comonent to the interface of another component through its attributes.\n\n The component1Ref and busInterface1Ref attributes indicate the instance name and bus interface name of one end of the connection. The component2Ref and busInterface2Ref attributes indicate the instance name and bus interface name of the other end of he connection. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 118, 1))
Namespace.addCategoryObject('elementBinding', interconnection.name().localName(), interconnection)

interconnections = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), CTD_ANON_90, documentation='Connections between internal sub components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 131, 1))
Namespace.addCategoryObject('elementBinding', interconnections.name().localName(), interconnections)

parameter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1))
Namespace.addCategoryObject('elementBinding', parameter.name().localName(), parameter)

generator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generator'), CTD_ANON_115, documentation='Specifies a set of generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 66, 1))
Namespace.addCategoryObject('elementBinding', generator.name().localName(), generator)

groupSelector = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), CTD_ANON_116, documentation='Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 88, 1))
Namespace.addCategoryObject('elementBinding', groupSelector.name().localName(), groupSelector)

phase = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phase'), CTD_ANON_117, documentation='This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 116, 1))
Namespace.addCategoryObject('elementBinding', phase.name().localName(), phase)

bank = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attibute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 346, 2))
Namespace.addCategoryObject('elementBinding', bank.name().localName(), bank)

baseAddress = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_120, documentation='Base of an address block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2))
Namespace.addCategoryObject('elementBinding', baseAddress.name().localName(), baseAddress)

bitOffset = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), CTD_ANON_121, documentation='Base bit offset of an address block.  If not included, it is assumed to be 0.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2))
Namespace.addCategoryObject('elementBinding', bitOffset.name().localName(), bitOffset)

requiresDriver = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver'), CTD_ANON_130, documentation='Specifies if a signal requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 125, 1))
Namespace.addCategoryObject('elementBinding', requiresDriver.name().localName(), requiresDriver)

value = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), CTD_ANON_131, documentation='The value of a signal.  1 or 0 for single bit signals, unsigned numeric otherwise.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 166, 1))
Namespace.addCategoryObject('elementBinding', value.name().localName(), value)

strength = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'strength'), CTD_ANON_132, documentation='The strength of the signal.  "strong" (default) or "weak".', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 178, 1))
Namespace.addCategoryObject('elementBinding', strength.name().localName(), strength)

configurableElement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElement'), CTD_ANON_133, documentation='Describes the configurable content of an element in the instance.  May contain text and/or child elements.\n\nThe required referenceId attribute refers to the ID attribute of the configurable element.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 33, 1))
Namespace.addCategoryObject('elementBinding', configurableElement.name().localName(), configurableElement)

componentGenerator = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator'), CTD_ANON_136, documentation='Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 76, 1))
Namespace.addCategoryObject('elementBinding', componentGenerator.name().localName(), componentGenerator)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choice'), CTD_ANON_, scope=CTD_ANON, documentation='Non-empty set of legal values for a user defined property of type spirit:formatType="choice" .', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 216, 4)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'choice')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 216, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_, documentation='Choice key, available for reference by the spirit:choiceRef attribute of user defined properties of type spirit:formatType="choice".', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 222, 7)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enumeration'), CTD_ANON_2, scope=CTD_ANON_, documentation='A possible value of spirit:choice', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 227, 7)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 222, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enumeration')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 227, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choices'), CTD_ANON, scope=CTD_ANON_3, documentation='Choices used by user defined properties of spirit:formatType ="choice"', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 210, 1)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'directConnection'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_3, documentation='When present this element indicates that a master interface may be directly connected to a slave interface (under certain conditions) for busses of this type.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 81, 8), unicode_default='true'))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'extends'), libraryRefType, scope=CTD_ANON_3, documentation='Optional name of bus type that this bus definition is compatible with. This bus definition may change the definitions of signals in the existing bus definition and add new signals, the signals in the original bus are not deleted but may be marked illegal to disallow their use.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 86, 8)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxMasters'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_3, documentation='Indicates the maximum number of masters this bus supports.  Default value of zero means unbounded. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 91, 8)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_3, documentation='Indicates the maximum number of slaves this bus supports.  Default value of zero means unbounded.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 96, 8)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signals'), CTD_ANON_4, scope=CTD_ANON_3, documentation='This is a list of logical signals defined by the bus.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 101, 8)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_3, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_3, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_3, documentation='Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_3, documentation='The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 81, 8))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 86, 8))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 91, 8))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 96, 8))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 194, 8))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 195, 8))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'directConnection')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 81, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'extends')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 86, 8))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxMasters')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 91, 8))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 96, 8))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signals')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 101, 8))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'choices')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 194, 8))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 195, 8))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_2()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signal'), CTD_ANON_5, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 107, 14)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signal')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 107, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_3()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_5, documentation='The assigned name of this signal in bus specifications.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 110, 20)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isAddress'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='If this element is present, the signal contains address information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 116, 22)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isData'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='If this element is present, the signal contains data information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 121, 22)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isClock'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='If this element is present, the signal contains clock information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 126, 22)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'isReset'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_5, documentation='Is this element is present, the signal contains reset information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 131, 22)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onSystem'), CTD_ANON_6, scope=CTD_ANON_5, documentation='Defines constraints for this signal when present in a system bus interface with a matching group name.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 138, 20)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onMaster'), CTD_ANON_7, scope=CTD_ANON_5, documentation='Defines constraints for this signal when present in a master bus interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 153, 20)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'onSlave'), CTD_ANON_8, scope=CTD_ANON_5, documentation='Defines constraints for this signal when present in a slave bus interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 161, 20)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), CTD_ANON_9, scope=CTD_ANON_5, documentation='Default value for the signal when used as an input and it ends up  being unconnected. Ignored for signals that require a singleShot or clock type driver. This value may be overridden by a defaultValue on a component pin.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 169, 20)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_5, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver'), CTD_ANON_130, scope=CTD_ANON_5, documentation='Specifies if a signal requires a driver. Default is false. The attribute driverType can further qualify what type of driver is required. Undefined behaviour if direction is not input or inout. Driver type any indicates that any unspecified type of driver must be connected', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 125, 1)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 116, 22))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 121, 22))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 126, 22))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 131, 22))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 137, 20))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 138, 20))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 153, 20))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 161, 20))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 169, 20))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 187, 20))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'logicalName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 110, 20))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isAddress')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 116, 22))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isData')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 121, 22))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isClock')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 126, 22))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'isReset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 131, 22))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'requiresDriver')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 137, 20))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onSystem')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 138, 20))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onMaster')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 153, 20))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'onSlave')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 161, 20))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultValue')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 169, 20))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 187, 20))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_4()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_6, documentation='Number of bits required to represent this signal. Absence of this element indicates unconstrained number of bits, i.e. the component will define th enumber of bits in this signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), STD_ANON_15, scope=CTD_ANON_6, documentation='If this element is present, the direction of this signal is restricted to the specified value. The direction is relative to the non-mirrored interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_6, documentation='Used to group system signals into different groups within a common bus.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 144, 26)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 144, 26))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitWidth')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_5()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_7, documentation='Number of bits required to represent this signal. Absence of this element indicates unconstrained number of bits, i.e. the component will define th enumber of bits in this signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6)))

CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), STD_ANON_15, scope=CTD_ANON_7, documentation='If this element is present, the direction of this signal is restricted to the specified value. The direction is relative to the non-mirrored interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitWidth')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_6()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_8, documentation='Number of bits required to represent this signal. Absence of this element indicates unconstrained number of bits, i.e. the component will define th enumber of bits in this signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6)))

CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), STD_ANON_15, scope=CTD_ANON_8, documentation='If this element is present, the direction of this signal is restricted to the specified value. The direction is relative to the non-mirrored interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitWidth')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 46, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 51, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_7()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'strength'), STD_ANON_2, scope=CTD_ANON_9, documentation='The strength of the signal. "strong" (default) or "weak"', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 28, 6), unicode_default='strong'))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_9, documentation='The value of a signal. 1 or 0 for single bit signals, unsigned numeric otherwise.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 177, 28)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 182, 28))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'strength')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 28, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 177, 28))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'strength')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busDefinition.xsd', 28, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_8()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterface'), busInterfaceType, scope=CTD_ANON_10, documentation='Describes one of the bus interfaces supported by this component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 32, 1)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 43, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busInterface')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 43, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_9()




busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=busInterfaceType, documentation='Uniquely names this bus interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 49, 3)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busType'), libraryRefType, scope=busInterfaceType, documentation='The bus type of this interface.  Refers to a bus description using vendor, library and name attributes.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 54, 3)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'master'), CTD_ANON_11, scope=busInterfaceType, documentation='If this element is present, the bus interface can serve as a master.  This element encapsulates additional information related to its role as master.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 60, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'slave'), CTD_ANON_12, scope=busInterfaceType, documentation='If this element is present, the bus interface can serve as a slave.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 87, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'system'), CTD_ANON_15, scope=busInterfaceType, documentation='If this element is present, the bus interface is a system interface, neither master nor slave, with a specific function on the bus.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 120, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredSlave'), CTD_ANON_16, scope=busInterfaceType, documentation='If this element is present, the bus interface represents a mirrored slave interface. All directional constraints on signals are reversed relative to the specification in the bus definition.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 130, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredMaster'), CTD_ANON_18, scope=busInterfaceType, documentation='If this element is present, the bus interface represents a mirrored master interface. All directional constraints on signals are reversed relative to the specification in the bus definition.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 174, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mirroredSystem'), CTD_ANON_19, scope=busInterfaceType, documentation='If this element is present, the bus interface represents a mirrored system interface. All directional constraints on signals are reversed relative to the specification in the bus definition.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 180, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'exportedInterface'), CTD_ANON_20, scope=busInterfaceType, documentation='If this element is present, this interface represents an interface being exported from a sub-component. The type of interface (master, slave, ...) should be obtained from the sub-component interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 190, 4)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'connection'), STD_ANON_4, scope=busInterfaceType, documentation='Directs how a bus interface is connected when the component is added to a design already containing a bus owner.\n\nDefault behavior is "explicit".', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 210, 3)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signalMap'), CTD_ANON_21, scope=busInterfaceType, documentation='Maps component signals to bus signals.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 231, 3)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'index'), CTD_ANON_94, scope=busInterfaceType, documentation="Master or slave index of this bus interface's connection on a bus.  Only used on indexed buses.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 256, 3)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitSteering'), CTD_ANON_95, scope=busInterfaceType, documentation='Indicates whether bit steering should be used to map this interface onto a bus of different data width.\n\nValues are "on", "off" or "default".', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 269, 3)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=busInterfaceType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

busInterfaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurators'), CTD_ANON_31, scope=busInterfaceType, documentation="Set of configurators on a configurable object. The contents of this container element are undefined for version 1.0 of the SPIRIT schema. It is expected that the contents will be defined when the tight generator interface is available. In this release only 'default' configurators are supported.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 23, 1)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 210, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 231, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 256, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 269, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 283, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 288, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 49, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 54, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'master')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 60, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'slave')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 87, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'system')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 120, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredSlave')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 130, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredMaster')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 174, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mirroredSystem')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 180, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'exportedInterface')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 190, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'connection')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 210, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signalMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 231, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'index')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 256, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitSteering')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 269, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configurators')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 283, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(busInterfaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 288, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
busInterfaceType._Automaton = _BuildAutomaton_10()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), CTD_ANON_91, scope=CTD_ANON_11, documentation='If this master connects to an addressable bus, this element references the address space  it maps to.  It has an addressSpaceRef attribute which is an addrSpaceID key ref.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 66, 7)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 66, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 66, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_11()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bridge'), CTD_ANON_13, scope=CTD_ANON_12, documentation='If this element is present, it indicates that the bus interface provides a bridge to another master bus interface on the same component.  It has a masterRef attribute which contains the name of the other bus interface.  It also has an opaque attribute to indicate that the bus bridge is opaque.\n\nAny slave interface can bridge to multiple master interfaces, and multiple slave interfaces can bridge to the same master interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 94, 7)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), CTD_ANON_14, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 109, 7)))

CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef'), memoryMapRefType, scope=CTD_ANON_12, documentation='References the memory map. The name of the memory map is kept in its memoryMapRef attribute.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 318, 2)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 93, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 94, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 109, 7))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryMapRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 93, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bridge')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 94, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 109, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_12()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 112, 10)))

CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_14, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 302, 1)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 112, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 113, 10))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 112, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 113, 10))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_13()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_15, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more signals in the corresonding bus definition.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 292, 1)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 126, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_14()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddresses'), CTD_ANON_17, scope=CTD_ANON_16, documentation='Represents a set of remap base addresses.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 136, 7)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 135, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 136, 7))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddresses')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 136, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_15()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapAddress'), CTD_ANON_92, scope=CTD_ANON_17, documentation='Base of an address block. The state attribute indicates the name of the remap state for which this address is valid.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 142, 10)))

CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_93, scope=CTD_ANON_17, documentation='The address range of mirrored slave. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 156, 10)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapAddress')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 142, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 156, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_16()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=CTD_ANON_19, documentation='Indicates which system interface is being mirrored. Name must match a group name present on one or more signals in the corresonding bus definition.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 292, 1)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 186, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_17()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, documentation='Indicates name of the sub-component  containing the interface being exported. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 196, 7)))

CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interfaceRef'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, documentation='Indicates the name of the sub-component bus interface being exported.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 201, 7)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 196, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interfaceRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 201, 7))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_18()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signalName'), CTD_ANON_22, scope=CTD_ANON_21, documentation="Maps a component's signal to a signal in a bus description. The text content of this element identifies a signal on this component bu its signal name.  The busSignal attribute names the corresponding signal in the bus definition.\n\nThe optional attributes left and right can be used to select a bit-slice of a signal vector to map to the bus interface. ", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 237, 6)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 237, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signalName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 237, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_19()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channel'), CTD_ANON_24, scope=CTD_ANON_23, documentation='Defines a set of mirrored interfaces of this component that are connected to one another.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 303, 4)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 303, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'channel')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 303, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_20()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxMasters'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_24, documentation='Overrides the maxMasters value in the bus definition if this number is more restrictive.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 309, 7)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_24, documentation='Overrides the maxSlaves value in the bus definition if this number is more restrictive.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 314, 7)))

CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterfaceRef'), pyxb.binding.datatypes.Name, scope=CTD_ANON_24, documentation='Contains the name of one of the bus interfaces that is part of this channel.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 319, 7)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 309, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 314, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 319, 7))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxMasters')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 309, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'maxSlaves')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 314, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busInterfaceRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 319, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_21()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapState'), CTD_ANON_26, scope=CTD_ANON_25, documentation='Contains a list of signals and values which tell the decoder to enter this remap state. The name attribute identifies the name of the state', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 340, 4)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapState')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 340, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_22()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapSignal'), CTD_ANON_27, scope=CTD_ANON_26, documentation='Contains the name and value of a signal on the component, the value indicates the logic value which this signal must take to effect the remapping. The id attribute stores the name of the signal which takes that value.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 346, 7)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapSignal')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 346, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_23()




def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 81, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 81, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_24()




componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'choices'), CTD_ANON, scope=componentType, documentation='Choices used by user defined properties of spirit:formatType ="choice"', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/autoConfigure.xsd', 210, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces'), CTD_ANON_10, scope=componentType, documentation='A list of bus interfaces supported by this component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 37, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'channels'), CTD_ANON_23, scope=componentType, documentation='Lists all channel connections between mirror interfaces of this component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 297, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'remapStates'), CTD_ANON_25, scope=componentType, documentation='Contains a list of remap state names and associated signal values', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 334, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=componentType, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=componentType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cpus'), CTD_ANON_29, scope=componentType, documentation="cpu's in the component", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 50, 3)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurators'), CTD_ANON_31, scope=componentType, documentation="Set of configurators on a configurable object. The contents of this container element are undefined for version 1.0 of the SPIRIT schema. It is expected that the contents will be defined when the tight generator interface is available. In this release only 'default' configurators are supported.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 23, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSets'), CTD_ANON_41, scope=componentType, documentation='List of file sets associated with component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 312, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators'), CTD_ANON_46, scope=componentType, documentation='List of component generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 157, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=componentType, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=componentType, documentation='Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=componentType, documentation='The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=componentType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces'), CTD_ANON_67, scope=componentType, documentation='If this component is a bus master, this lists all the address spaces\ndefined by the component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 269, 2)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps'), CTD_ANON_69, scope=componentType, documentation='Lists all the slave memory maps defined by the component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 323, 2)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hwModel'), hwModelType, scope=componentType, documentation='Hardware model information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 101, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), CTD_ANON_85, scope=componentType, documentation='Sub instances of internal components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 68, 1)))

componentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), CTD_ANON_90, scope=componentType, documentation='Connections between internal sub components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 131, 1)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 34, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 35, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 36, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 37, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 38, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 39, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 40, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 41, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 42, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 47, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 48, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 49, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 50, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 84, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 85, 3))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busInterfaces')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 34, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'channels')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 35, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentInstances')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 36, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnections')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 37, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'remapStates')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 38, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpaces')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 39, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryMaps')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 40, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hwModel')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 41, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentGenerators')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 42, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configurators')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 47, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'choices')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 48, 3))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSets')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 49, 3))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cpus')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 50, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 84, 3))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(componentType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 85, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
componentType._Automaton = _BuildAutomaton_25()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'cpu'), CTD_ANON_30, scope=CTD_ANON_29, documentation='Describes a processor in this component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 56, 6)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 56, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'cpu')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 56, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_26()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_30, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_30, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=CTD_ANON_30, documentation='The name of the cpu instance relative to the platform core.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 62, 9)))

CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef'), addrSpaceRefType, scope=CTD_ANON_30, documentation='References the address space.  The name of the address space is kept in its addressSpaceRef attribute.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 264, 2)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 72, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 77, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 62, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpaceRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 67, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 72, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/component.xsd', 77, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_27()




def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 29, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_lax, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/configurator.xsd', 29, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_28()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_32, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_32, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_32, documentation='Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_32, documentation='The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstances'), CTD_ANON_85, scope=CTD_ANON_32, documentation='Sub instances of internal components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 68, 1)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections'), CTD_ANON_88, scope=CTD_ANON_32, documentation='Defines the set of ad-hoc connections in a design. An ad-hoc connection represents a connection between two component pins which were not connected as a result of interface connections (i.e.the pin to pin connection was made explicitly and is represented explicitly).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 108, 1)))

CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnections'), CTD_ANON_90, scope=CTD_ANON_32, documentation='Connections between internal sub components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 131, 1)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 30, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 31, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 32, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 33, 4))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentInstances')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 30, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnections')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 31, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adHocConnections')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 32, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/design.xsd', 33, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_29()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_33, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), CTD_ANON_96, scope=CTD_ANON_33, documentation='Path to the file or directory.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 30, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'logicalName'), CTD_ANON_34, scope=CTD_ANON_33, documentation='Logical name for this file or directory e.g. VHDL library name.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 43, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'exportedName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_33, documentation='Defines exported names that can be accessed externally, e.g. exported function names from a C source file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 55, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'buildCommand'), CTD_ANON_35, scope=CTD_ANON_33, documentation='Command and flags used to build derived files from the sourceName files. If this element is present, the command and/or flags used to to build the file will override or augment any default builders at a higher level.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 60, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'define'), nameValuePairType, scope=CTD_ANON_33, documentation='Specifies define symbols that are used in the source file.  The spirit:name attribute gives the name to be defined and the text content of the element holds the value.  This element supports full configurability.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 119, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'imageType'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, documentation='Relates the current file to a certain executable image type in the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 124, 4)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependency'), spiritURI, scope=CTD_ANON_33, documentation='Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 307, 1)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_6, scope=CTD_ANON_33, documentation='Enumerated file types known by SPIRIT.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3)))

CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, documentation='Free form file type, not - yet - known by SPIRIT .', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 43, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 55, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 60, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 118, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 119, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 124, 4))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 129, 4))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 30, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'logicalName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 43, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'exportedName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 55, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'buildCommand')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 60, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dependency')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 118, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'define')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 119, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'imageType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 124, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 129, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_30()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), CTD_ANON_97, scope=CTD_ANON_35, documentation='Command used to build this file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 66, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flags'), CTD_ANON_98, scope=CTD_ANON_35, documentation='Flags given to the build command when building this file. If the optional attribute "append" is "true", this string will be appended to any existing flags, otherwise these flags will replace any existing default flags.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 78, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), CTD_ANON_99, scope=CTD_ANON_35, documentation='If true, the value of the sibling element "flags" should replace any default flags specified at a more global level. If this is true and the sibling element "flags" is empty or missing, this has the effect of clearing any default flags.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 91, 7)))

CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'targetName'), CTD_ANON_100, scope=CTD_ANON_35, documentation='Pathname to the file that is derived (built) from the source file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 103, 7)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 66, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 78, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 91, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 103, 7))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 66, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'flags')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 78, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 91, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'targetName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 103, 7))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_31()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_36, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_36, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), CTD_ANON_101, scope=CTD_ANON_36, documentation='Name of the executable image file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 146, 4)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'languageTools'), CTD_ANON_37, scope=CTD_ANON_36, documentation='Default commands and flags for software language tools needed to build the executable image.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 163, 4)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup'), CTD_ANON_40, scope=CTD_ANON_36, documentation='Contains a group of file set references that indicates the set of file sets complying with the tool set of the current executable image.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 286, 4)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 158, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 163, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 286, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 296, 4))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 146, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 158, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'languageTools')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 163, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRefGroup')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 286, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 296, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_32()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileBuilder'), CTD_ANON_38, scope=CTD_ANON_37, documentation='A generic placeholder for any file builder like compilers and assemblers.  It contains the file types to which the command should be applied, and the flags to be used with that command.  ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 169, 7)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linker'), CTD_ANON_105, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 218, 7)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkerFlags'), CTD_ANON_106, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 227, 7)))

CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'linkerCommandFile'), CTD_ANON_39, scope=CTD_ANON_37, documentation='Specifies a linker command file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 236, 7)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 169, 7))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 218, 7))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 227, 7))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 236, 7))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileBuilder')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 169, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linker')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 218, 7))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linkerFlags')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 227, 7))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'linkerCommandFile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 236, 7))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_33()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_38, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), CTD_ANON_102, scope=CTD_ANON_38, documentation='Default command used to build files of the specified fileType. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 176, 10)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flags'), CTD_ANON_103, scope=CTD_ANON_38, documentation='Flags given to the build command when building files of this type.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 188, 10)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), CTD_ANON_104, scope=CTD_ANON_38, documentation='If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 200, 10)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_6, scope=CTD_ANON_38, documentation='Enumerated file types known by SPIRIT.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3)))

CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=CTD_ANON_38, documentation='Free form file type, not - yet - known by SPIRIT .', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 188, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 200, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 214, 10))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 176, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'flags')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 188, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 200, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 214, 10))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_34()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), CTD_ANON_107, scope=CTD_ANON_39, documentation='Linker command file name.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 242, 10)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'commandLineSwitch'), CTD_ANON_108, scope=CTD_ANON_39, documentation='The command line switch to specify the linker command file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 254, 10)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enable'), CTD_ANON_109, scope=CTD_ANON_39, documentation='Specifies whether to generate and enable the linker command file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 266, 10)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generatorRef'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, documentation='A reference to a generator element.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 480, 1)))

CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configuratorRef'), pyxb.binding.datatypes.string, scope=CTD_ANON_39, documentation='A reference to a configurator element.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 485, 1)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 278, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 279, 10))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 242, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'commandLineSwitch')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 254, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enable')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 266, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configuratorRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 278, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generatorRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 279, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_35()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_40, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 302, 1)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 292, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 292, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_36()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSet'), fileSetType, scope=CTD_ANON_41, documentation='This element specifies a list of unique pathnames to files and directories. It may also include build instructions for the files. If compilation order is important, e.g. for VHDL files, the files have to be provided in compilation order.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 135, 1)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 318, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSet')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 318, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_37()




fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'command'), CTD_ANON_110, scope=fileBuilderType, documentation='Default command used to build files of the specified fileType. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 325, 3)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'flags'), CTD_ANON_111, scope=fileBuilderType, documentation='Flags given to the build command when building files of this type.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 337, 3)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags'), CTD_ANON_112, scope=fileBuilderType, documentation='If true, replace any default flags value with the value in the sibling flags element. Otherwise, append the contents of the sibling flags element to any default flags value.\n\nIf the value is true and the "flags" element is empty or missing, this will have the result of clearing any default flags value.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 349, 3)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_6, scope=fileBuilderType, documentation='Enumerated file types known by SPIRIT.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3)))

fileBuilderType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=fileBuilderType, documentation='Free form file type, not - yet - known by SPIRIT .', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 325, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 337, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 349, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'command')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 325, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'flags')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 337, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(fileBuilderType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'replaceDefaultFlags')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 349, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
fileBuilderType._Automaton = _BuildAutomaton_38()




fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=fileSetType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'file'), CTD_ANON_33, scope=fileSetType, documentation='SPIRIT reference to a file or directory.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 24, 1)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependency'), spiritURI, scope=fileSetType, documentation='Specifies a location on which  files or fileSets may be dependent. Typically, this would be a directory that would contain included files.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 307, 1)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'owner'), libraryRefType, scope=fileSetType, documentation='Specifies the original owner of the fileSet, used when importing fileSets from other components, as in Hierarchical components, to allow the parent component to correctly locate files imported from subcomponents', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 367, 3)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=fileSetType, documentation='Identifies this filleSet as belonging to a particular group or having a particular purpose. Examples might be "diagnostics", "boot", "application", "interrupt", "deviceDriver", etc.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 372, 3)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), fileBuilderType, scope=fileSetType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 378, 3)))

fileSetType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'swFunction'), CTD_ANON_42, scope=fileSetType, documentation='Generator information if this file set describes a sw function. For example, this file set may describe diagnostics for which the DE can generate a diagnostics driver.\n\nThe boolean attribute "replicate", if true (default is false), directs the generator to compile a separate object module for each instance of the component in the design. Otherwise the single function will be called with different arguments for each instance (e.g. baseAddress).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 380, 3)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 367, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 372, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 377, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 378, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 379, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 380, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 455, 3))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'owner')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 367, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 372, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'file')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 377, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 378, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dependency')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 379, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'swFunction')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 380, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(fileSetType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 455, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
fileSetType._Automaton = _BuildAutomaton_39()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'entryPoint'), pyxb.binding.datatypes.Name, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 388, 6)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileRef'), pyxb.binding.datatypes.IDREF, scope=CTD_ANON_42, documentation='A reference to the file that contains the entry point function.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 389, 6)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'returnType'), STD_ANON_5, scope=CTD_ANON_42, documentation='Function return type. See the enumerations.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 394, 6)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'argument'), CTD_ANON_135, scope=CTD_ANON_42, documentation='Arguments passed in when the function is called. Arguments are passed in order.\n\nThis is an extension of the name-value pair which includes the data type in the spirit:dataType attribute.  The argument name is in the spirit:name attribute and its value is in the text content of the element.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 405, 6)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'enabled'), CTD_ANON_113, scope=CTD_ANON_42, documentation='Specifies if the SW function is enabled. Default is true.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 419, 6)))

CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceFile'), CTD_ANON_43, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 431, 6)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 388, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 394, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 405, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 419, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 431, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'entryPoint')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 388, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 389, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'returnType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 394, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'argument')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 405, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'enabled')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 419, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceFile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 431, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_40()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'sourceName'), CTD_ANON_114, scope=CTD_ANON_43, documentation='Source file for the boot load.  Relative names are searched for in the project directory and the source of the component directory.\n    ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 434, 9)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileType'), STD_ANON_6, scope=CTD_ANON_43, documentation='Enumerated file types known by SPIRIT.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'userFileType'), pyxb.binding.datatypes.string, scope=CTD_ANON_43, documentation='Free form file type, not - yet - known by SPIRIT .', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'sourceName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 434, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 27, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'userFileType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/fileType.xsd', 59, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_41()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_44, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileGeneratorSelector'), CTD_ANON_45, scope=CTD_ANON_44, documentation='Select other generator chain files for inclusion into this chain. The boolean attribute "unique" (default false) specifies that only a single generator is valid in this context. If more that one generator is selcted based on the selection criteria, DE will prompt the user to resolve to a single generator.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 29, 5)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGeneratorSelector'), generatorSelectorType, scope=CTD_ANON_44, documentation='Selects generators declared in component description files of the current design for inclusion into this generator chain.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 45, 5)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busGeneratorSelector'), generatorSelectorType, scope=CTD_ANON_44, documentation='Selects generators declared in bus definition files of the current design for inclusion into this generator chain.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 50, 5)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'chainGroup'), pyxb.binding.datatypes.Name, scope=CTD_ANON_44, documentation='Identifies this generator chain as belonging to the named group. This is used by other generator chains to select this chain for programmatic inclusion.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 57, 4)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'generator'), CTD_ANON_115, scope=CTD_ANON_44, documentation='Specifies a set of generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 66, 1)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_44, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_44, documentation='Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_44, documentation='The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3)))

CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 57, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 62, 4))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 58, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileGeneratorSelector')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 29, 5))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentGeneratorSelector')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 45, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busGeneratorSelector')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 50, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'generator')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 55, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'chainGroup')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 57, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 62, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_42()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileName'), libraryRefType, scope=CTD_ANON_45, documentation='Select another generator chain using the unique identifier of this generator chain.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 36, 8)))

CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), CTD_ANON_116, scope=CTD_ANON_45, documentation='Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 88, 1)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'groupSelector')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 35, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 36, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_43()




generatorSelectorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupSelector'), CTD_ANON_116, scope=generatorSelectorType, documentation='Specifies a set of group names used to select subsequent generators. The attribute "multipleGroupOperator" specifies the OR or AND selection operator if there is more than one group name (default=OR).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 88, 1)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(generatorSelectorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'groupSelector')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 154, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
generatorSelectorType._Automaton = _BuildAutomaton_44()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator'), CTD_ANON_136, scope=CTD_ANON_46, documentation='Specifies a set of component generators. The scope attribute applies to component generators and specifies whether the generator should be run for each instance of the entity (or module) or just once for all instances of the entity.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 76, 1)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 163, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentGenerator')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 163, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_45()




generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=generatorType, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=generatorType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phase'), CTD_ANON_117, scope=generatorType, documentation='This is an non-negative floating point number that is used to sequence when a generator is run. The generators are run in order starting with zero. There may be multiple generators with the same phase number. In this case, the order should not matter with respect to other generators at the same phase. If no phase number is given the generator will be considered in the "last" phase and these generators will be run in the order in which they are encountered while processing generator elements.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 116, 1)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.string, scope=generatorType, documentation='The name of this generator.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 172, 3)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'accessType'), CTD_ANON_47, scope=generatorType, documentation='Identifies the special requirements that this generator may place up on the DE.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3)))

generatorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'looseGeneratorExe'), spiritURI, scope=generatorType, documentation='The pathname to the executable file that implements the loose generator', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 227, 3)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 172, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accessType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'looseGeneratorExe')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 227, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(generatorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
generatorType._Automaton = _BuildAutomaton_46()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'readOnly'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_47, documentation='If true then this generator will not make changes to the  design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 185, 6), unicode_default='false'))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hierarchical'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_47, documentation='If true then this generator is capable of running in a hierarchical manner and so the DE must ensure that all lower levels of hierarchy are also made available', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 190, 6), unicode_default='true'))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceRequired'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_47, documentation='If true then the generator operates on designated instances, not the whole design. The DE must capture the instances to be operated on.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 195, 6), unicode_default='false'))

CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subsetOnly'), CTD_ANON_48, scope=CTD_ANON_47, documentation='If present then this generator only needs a subset of the design information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 200, 6)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 200, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'readOnly')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 185, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hierarchical')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 190, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instanceRequired')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subsetOnly')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 200, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_47()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'designFile'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_48, documentation='If true then the generator only needs to look at design information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 206, 9), unicode_default='true'))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentDefs'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_48, documentation='If true then the generator only needs to look at component related information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 211, 9), unicode_default='true'))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busDefs'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_48, documentation='If true then the generator only needs to look at bus definition information.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 216, 9), unicode_default='true'))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'designFile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 206, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentDefs')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 211, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busDefs')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 216, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_48()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentChanges'), CTD_ANON_50, scope=CTD_ANON_49, documentation='List of changes affecting components in the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 52, 4)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnectionChanges'), CTD_ANON_53, scope=CTD_ANON_49, documentation='List of changes affecting interconnections in the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 89, 4)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnectionChanges'), CTD_ANON_55, scope=CTD_ANON_49, documentation='List of changes affecting ad-hoc connections in the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 106, 4)))

CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensionChanges'), CTD_ANON_58, scope=CTD_ANON_49, documentation='List of changes affecting vendor defined extensions in the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 150, 4)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 52, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 89, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 106, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 150, 4))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentChanges')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 52, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnectionChanges')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 89, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adHocConnectionChanges')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 106, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensionChanges')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 150, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_49()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentChange'), CTD_ANON_51, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 58, 7)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 58, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 58, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_50()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addRemRepChange'), STD_ANON_9, scope=CTD_ANON_51, documentation='Indicates whether the alteration is an addition, removal or a replacement', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 23, 1)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentFileName'), spiritURI, scope=CTD_ANON_51, documentation='This is the file containing the component definition. Required only if the alteration is an addition or a replacement. Should be an absolute filename so that the DE may copy it.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 63, 10)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subComponents'), CTD_ANON_52, scope=CTD_ANON_51, documentation="Required only for hierarchical components. Holds the hierarchical component's sub-component definition files.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 68, 10)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configuration'), CTD_ANON_83, scope=CTD_ANON_51, documentation='All configuration information for a contained component or channel instance.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 23, 1)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_51, documentation='An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 47, 1)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 63, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 68, 10))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 82, 10))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addRemRepChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 61, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instanceName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 62, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentFileName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 63, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subComponents')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 68, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configuration')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 82, 10))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_51()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subComponentFileName'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_52, documentation='Path to definitions of components and channels instanced in hierarchical component definition.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 74, 13)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subComponentFileName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 74, 13))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_52()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnectionChange'), CTD_ANON_54, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 95, 7)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 95, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnectionChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 95, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_53()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addRemChange'), STD_ANON_10, scope=CTD_ANON_54, documentation='Indicates whether the alteration is an addition or a removal', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 35, 1)))

CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), CTD_ANON_89, scope=CTD_ANON_54, documentation='Describes a connection from the interace of one comonent to the interface of another component through its attributes.\n\n The component1Ref and busInterface1Ref attributes indicate the instance name and bus interface name of one end of the connection. The component2Ref and busInterface2Ref attributes indicate the instance name and bus interface name of the other end of he connection. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 118, 1)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addRemChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 98, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnection')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 99, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_54()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnectionChange'), CTD_ANON_56, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 112, 7)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 112, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adHocConnectionChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 112, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_55()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addRemChange'), STD_ANON_10, scope=CTD_ANON_56, documentation='Indicates whether the alteration is an addition or a removal', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 35, 1)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.short, scope=CTD_ANON_56, documentation='This is the name of the ad-hoc connection to modify', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 116, 10)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'export'), CTD_ANON_118, scope=CTD_ANON_56, documentation='Specifies whether this ad-hoc connection will be exported out of the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 121, 10)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinReference'), CTD_ANON_57, scope=CTD_ANON_56, documentation='Indicates the signal on the component which is being connected by this ad-hoc connection', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 133, 10)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 121, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 133, 10))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addRemChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 115, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 116, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'export')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 121, 10))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinReference')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 133, 10))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_56()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensionChange'), CTD_ANON_59, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 156, 7)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 156, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensionChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 156, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_57()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_59, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addRemChange'), STD_ANON_10, scope=CTD_ANON_59, documentation='Indicates whether the alteration is an addition or a removal', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 35, 1)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addRemChange')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 159, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorChanges.xsd', 160, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_58()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'designFile'), pyxb.binding.datatypes.anyType, scope=CTD_ANON_60, documentation='Path to description of top level design', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 30, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busDefinitionFiles'), CTD_ANON_61, scope=CTD_ANON_60, documentation='The list of bus definition files currently in use within the design', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 35, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentDefinitionFiles'), CTD_ANON_62, scope=CTD_ANON_60, documentation='The list of component definition files currently needed to define all the components within the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 49, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameters'), CTD_ANON_64, scope=CTD_ANON_60, documentation='List of values of configurable settings for this generator invocation', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 70, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'selectedInstances'), CTD_ANON_65, scope=CTD_ANON_60, documentation='The list of instances to be worked upon by the generator, no instances selected indicates whole design', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 80, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'phaseNumber'), pyxb.binding.datatypes.double, scope=CTD_ANON_60, documentation='The non-negative floating point phase number associated with this generator invocation', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 94, 4)))

CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'groupName'), pyxb.binding.datatypes.string, scope=CTD_ANON_60, documentation='The generator group name associated with this generator invocation', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 99, 4)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 35, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 49, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 70, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 80, 4))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'designFile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 30, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busDefinitionFiles')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 35, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentDefinitionFiles')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 49, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameters')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 70, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'selectedInstances')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 80, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phaseNumber')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 94, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'groupName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 99, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_59()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'busDefinitionFile'), resolvedLibraryRefType, scope=CTD_ANON_61, documentation='Path to a bus definition file used within design. Attributes VLNV used to indicate which bus definition this file represents.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 41, 7)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'busDefinitionFile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 41, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_60()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentDefinitionFile'), CTD_ANON_63, scope=CTD_ANON_62, documentation='Path to component definition file. This component definition is the component definition as it appears in the DE; i.e. after having been transformed by any PMD info, and including any instance specific settings such as parameter values. The instanceRef attribute is the name of the instance that this file describes.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 55, 7)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentDefinitionFile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 55, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_61()




def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_62()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_64, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 76, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_63()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'selectedInstance'), pyxb.binding.datatypes.string, scope=CTD_ANON_65, documentation='Instance name of selected instance that the generator is expected to work upon. This may be a hierarchical instance name.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 86, 7)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'selectedInstance')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/looseGeneratorInvocation.xsd', 86, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_64()




addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=addressBlockType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=addressBlockType, documentation='Indicates whether the data is volatile, default to false when not present.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), unicode_default='false'))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), accessType, scope=addressBlockType, documentation="Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_120, scope=addressBlockType, documentation='Base of an address block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), CTD_ANON_121, scope=addressBlockType, documentation='Base bit offset of an address block.  If not included, it is assumed to be 0.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_122, scope=addressBlockType, documentation='The address range of an address block.  Expressed as the number of addressable units accessable to the block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), CTD_ANON_123, scope=addressBlockType, documentation='Bit width of an address block.  If zero or absent and this is part of a slave memory map, the width is assumed to be the data width of the slave interface.  It this is part of a local memory map, a missing width is assumed to be the effective width of the address space.  If this is part of an address space definition, a missing width is assumed to be the widest data signal of all bus interfaces that reference this address space.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=addressBlockType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=addressBlockType, documentation='Any additional parameters needed to describe this address block to the generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6)))

addressBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'register'), CTD_ANON_70, scope=addressBlockType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 399, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 388, 6))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 398, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 399, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'register')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(addressBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 388, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
addressBlockType._Automaton = _BuildAutomaton_65()




bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=bankedBlockType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=bankedBlockType, documentation='Indicates whether the data is volatile, default to false when not present.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), unicode_default='false'))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), accessType, scope=bankedBlockType, documentation="Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_122, scope=bankedBlockType, documentation='The address range of an address block.  Expressed as the number of addressable units accessable to the block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), CTD_ANON_123, scope=bankedBlockType, documentation='Bit width of an address block.  If zero or absent and this is part of a slave memory map, the width is assumed to be the data width of the slave interface.  It this is part of a local memory map, a missing width is assumed to be the effective width of the address space.  If this is part of an address space definition, a missing width is assumed to be the widest data signal of all bus interfaces that reference this address space.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=bankedBlockType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=bankedBlockType, documentation='Any additional parameters needed to describe this address block to the generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6)))

bankedBlockType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'register'), CTD_ANON_70, scope=bankedBlockType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 388, 6))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'register')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 483, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(bankedBlockType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 388, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bankedBlockType._Automaton = _BuildAutomaton_66()




bankedSubspaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=bankedSubspaceType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

bankedSubspaceType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=bankedSubspaceType, documentation='Any parameters that may apply to the subspace reference.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 132, 6)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 132, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 137, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(bankedSubspaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 132, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(bankedSubspaceType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 137, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
bankedSubspaceType._Automaton = _BuildAutomaton_67()




fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=fieldType, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=fieldType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=fieldType, documentation='Field name.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 143, 6)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), pyxb.binding.datatypes.nonNegativeInteger, scope=fieldType, documentation="Offset of this field's lsb from bit 0 of the register.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 148, 6)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitWidth'), pyxb.binding.datatypes.positiveInteger, scope=fieldType, documentation='Width of the field in bits.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 153, 6)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=fieldType, documentation='Bit field description.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 159, 6)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'values'), CTD_ANON_66, scope=fieldType, documentation='Enumerates specific values that can be assigned to the bit field.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 164, 6)))

fieldType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), accessType, scope=fieldType, documentation="Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 159, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 164, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 188, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 189, 6))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 143, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 148, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitWidth')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 153, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 158, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 159, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'values')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 164, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 188, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(fieldType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 189, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
fieldType._Automaton = _BuildAutomaton_68()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), spiritNumberType, scope=CTD_ANON_66, documentation='Enumerated bit field value.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 170, 12)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_66, documentation='Description of a bit field value.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 175, 12)))

CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.token, scope=CTD_ANON_66, documentation='The name of this enumerated value. This may be used as a token in generating code.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 180, 12)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 170, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 175, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 180, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_69()




memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), subspaceRefType, scope=memoryMapType, documentation='Maps in an address subspace from accross a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=memoryMapType, documentation='Memory map name, unique within the component. Put into a group to avoid making it a top level element', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 208, 6)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryRemap'), memoryRemapType, scope=memoryMapType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 214, 6)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, scope=memoryMapType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 259, 2)))

memoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, scope=memoryMapType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attibute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 346, 2)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 213, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 214, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 208, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 194, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(memoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryRemap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 214, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
memoryMapType._Automaton = _BuildAutomaton_70()




memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), subspaceRefType, scope=memoryRemapType, documentation='Maps in an address subspace from accross a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6)))

memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, scope=memoryRemapType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 259, 2)))

memoryRemapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, scope=memoryRemapType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attibute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 346, 2)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 221, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 194, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 195, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(memoryRemapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
memoryRemapType._Automaton = _BuildAutomaton_71()




localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), subspaceRefType, scope=localMemoryMapType, documentation='Maps in an address subspace from accross a bus bridge.  Its masterRef attribute refers by name to the master bus interface on the other side of the bridge.  It must match the masterRef attribute of a bridge element on the slave interface, and that bridge element must be designated as opaque.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6)))

localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), addressBlockType, scope=localMemoryMapType, documentation='This is a single contiguous block of memory inside a memory map.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 259, 2)))

localMemoryMapType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), addressBankType, scope=localMemoryMapType, documentation="Represents a bank of memory made up of address blocks or other banks.  It has a bankAlignment attibute indicating whether its blocks are aligned in 'parallel' (occupying adjacent bit fields) or 'serial' (occupying contiguous addresses). Its child blocks do not contain addresses or bit offsets.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 346, 2)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 232, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 194, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 195, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(localMemoryMapType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
localMemoryMapType._Automaton = _BuildAutomaton_72()




subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=subspaceRefType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=subspaceRefType, documentation='Any parameters that may apply to the subspace reference.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 240, 6)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_120, scope=subspaceRefType, documentation='Base of an address block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2)))

subspaceRefType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), CTD_ANON_121, scope=subspaceRefType, documentation='Base bit offset of an address block.  If not included, it is assumed to be 0.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 399, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 240, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 245, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 398, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 399, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 240, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(subspaceRefType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 245, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
subspaceRefType._Automaton = _BuildAutomaton_73()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressSpace'), CTD_ANON_68, scope=CTD_ANON_67, documentation='This defines a logical space, referenced by a bus master.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 276, 8)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 276, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressSpace')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 276, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_74()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_68, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'executableImage'), CTD_ANON_36, scope=CTD_ANON_68, documentation='Specifies an executable software image to be loaded into a processors address space. The format of the image is not specified. It could, for example, be an ELF loadfile, or it could be raw binary or ascii hex data for loading directly into a memory model instance.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 140, 1)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_68, documentation='The name of the address space.  Unique within the model.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 282, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'endianness'), STD_ANON_11, scope=CTD_ANON_68, documentation='Specifies the data storage as "big" or "little" endian.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 289, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'localMemoryMap'), localMemoryMapType, scope=CTD_ANON_68, documentation='Provides the local memory map of an address space.  Blocks in this memory map are accessable to master interfaces on this component that reference this address space.   They are not accessable to any external master interface.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 301, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_68, documentation='Data specific to this address space.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 306, 14)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_68, documentation='The number of bits in the least addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 376, 2)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'range'), CTD_ANON_122, scope=CTD_ANON_68, documentation='The address range of an address block.  Expressed as the number of addressable units accessable to the block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6)))

CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'width'), CTD_ANON_123, scope=CTD_ANON_68, documentation='Bit width of an address block.  If zero or absent and this is part of a slave memory map, the width is assumed to be the data width of the slave interface.  It this is part of a local memory map, a missing width is assumed to be the effective width of the address space.  If this is part of an address space definition, a missing width is assumed to be the widest data signal of all bus interfaces that reference this address space.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 288, 14))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 289, 14))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 300, 14))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 301, 14))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 306, 14))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 311, 14))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 282, 14))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'range')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 431, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'width')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 443, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 288, 14))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'endianness')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 289, 14))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'executableImage')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 300, 14))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'localMemoryMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 301, 14))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 306, 14))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 311, 14))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_75()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'memoryMap'), CTD_ANON_119, scope=CTD_ANON_69, documentation="The set of address blocks a bus slave contributes to the bus' address space.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 329, 8)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 329, 8))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 329, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_76()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_70, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=CTD_ANON_70, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=CTD_ANON_70, documentation='Indicates whether the data is volatile, default to false when not present.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), unicode_default='false'))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), accessType, scope=CTD_ANON_70, documentation="Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_70, documentation='Register name.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 486, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dim'), pyxb.binding.datatypes.nonNegativeInteger, scope=CTD_ANON_70, documentation='Dimensions a register array.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 491, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressOffset'), spiritNumberType, scope=CTD_ANON_70, documentation='Offset from baseAddress.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 496, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'size'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_70, documentation='Size in bits.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 501, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependency'), CTD_ANON_71, scope=CTD_ANON_70, documentation='Indicates that this register has a dependency on the setting of another register.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 508, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'resetValue'), spiritNumberType, scope=CTD_ANON_70, documentation='Register value at reset.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 537, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'field'), fieldType, scope=CTD_ANON_70, documentation='Describes individual bit fields within the register.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 542, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'description'), pyxb.binding.datatypes.string, scope=CTD_ANON_70, documentation='Register description', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 547, 12)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 491, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 506, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 507, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 508, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 537, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 542, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 547, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 552, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 553, 12))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 486, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dim')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 491, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 496, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'size')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 501, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 506, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 507, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dependency')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 508, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'resetValue')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 537, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'field')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 542, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'description')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 547, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 552, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 553, 12))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_77()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'registerRef'), pyxb.binding.datatypes.Name, scope=CTD_ANON_71, documentation='The name of the register that enables this register.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 514, 18)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fieldRef'), pyxb.binding.datatypes.Name, scope=CTD_ANON_71, documentation='Name of the field within the register that enables this register.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 519, 18)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), spiritNumberType, scope=CTD_ANON_71, documentation='Value that the enabling field must be set to to enable this register.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 524, 18)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'mask'), spiritNumberType, scope=CTD_ANON_71, documentation='Mask to be anded with the value of the enabling field or register before comparing to the dependency value.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 529, 18)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 519, 18))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 529, 18))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'registerRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 514, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fieldRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 519, 18))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 524, 18))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'mask')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 529, 18))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_78()




viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=viewType, documentation='A name value pair.  The name is in given by the name attribute.  The value is in the text content of the element.  This element supports all configurability attributes.  It also supports a cross reference attribute which allows it to be associated with other elements in the document through an XPath expression.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 59, 1)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=viewType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef'), pyxb.binding.datatypes.NMTOKEN, scope=viewType, documentation='A reference to a fileSet.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/file.xsd', 302, 1)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=viewType, documentation='Name of the view. Must be unique within a component', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 26, 3), unicode_default='default'))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier'), pyxb.binding.datatypes.string, scope=viewType, documentation='This is a string such as "ModelsimVerilog", used to uniquely identify the hardware environment. More than one indicates that the same information applies to multiple environments.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 31, 3)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'language'), CTD_ANON_72, scope=viewType, documentation='The hardware description language used such as "verilog" or "vhdl". If the attribute "strict" is "true", this value must match the language being generated for the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 36, 3)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'modelName'), pyxb.binding.datatypes.string, scope=viewType, documentation='HDL-specific name to identify the model.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 48, 3)))

viewType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder'), fileBuilderType, scope=viewType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 53, 3)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 36, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 48, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 53, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 54, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 69, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 56, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 26, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'envIdentifier')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 31, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'language')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 36, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'modelName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 48, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultFileBuilder')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 53, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'fileSetRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 54, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 69, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(viewType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 56, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
viewType._Automaton = _BuildAutomaton_79()




hwModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=hwModelType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

hwModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'views'), CTD_ANON_73, scope=hwModelType, documentation='View container', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 64, 3)))

hwModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signals'), CTD_ANON_74, scope=hwModelType, documentation='Signal container', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 74, 3)))

hwModelType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hwParameters'), CTD_ANON_75, scope=hwModelType, documentation='Hardware parameter name value pairs container', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 84, 3)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 64, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 74, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 84, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 98, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(hwModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'views')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 64, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(hwModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signals')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 74, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(hwModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hwParameters')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 84, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(hwModelType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 98, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
hwModelType._Automaton = _BuildAutomaton_80()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'view'), viewType, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 70, 6)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 70, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'view')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 70, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_81()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'signal'), signalType, scope=CTD_ANON_74, documentation='Describes signal charateristics.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 95, 1)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 80, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'signal')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 80, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_82()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'hwParameter'), nameValueTypeType, scope=CTD_ANON_75, documentation='A hardware parameter name value pair.  The name is given in an attribute.  The value is the element value. The dataType (applicable to high level modeling) is given in the dataType attribute. The name should be identical to the RTL (VHDL generic or Verilog parameter)', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 90, 6)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 90, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'hwParameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/model.xsd', 90, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_83()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendor'), pyxb.binding.datatypes.Name, scope=CTD_ANON_76, documentation='Name of the vendor who supplies this file.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'library'), pyxb.binding.datatypes.Name, scope=CTD_ANON_76, documentation='Name of the logical library this component belongs to.  Note that a physical library may contain components from multiple logical libraries.  Logical libraries are displayes in component browser.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_76, documentation='The name of the object.  Must match the root name of the XML file and the directory name it or its version directory belongs to.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'version'), pyxb.binding.datatypes.NMTOKEN, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'appliesTo'), CTD_ANON_77, scope=CTD_ANON_76, documentation='Defines the components that this pmd applies to. When the user tries to add any of those components, this pmd will be applied.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 31, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'dependsOn'), CTD_ANON_78, scope=CTD_ANON_76, documentation='Defines the components that  must exist in the current design for this pmd to apply. The pmd will only apply if an instance of each components declared in this list exists in the design. If the list is empty then this pmd file will apply unconditionaly.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 63, 4)))

CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'transformer'), CTD_ANON_79, scope=CTD_ANON_76, documentation='The transformer element contains references to the actual code that will make the transformation. If there are multiple elements, they will be applied in sequence. i.e., the affected component document will pass through a pipeline of transformers with each child element representing a step in a pipeline.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 77, 4)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendor')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 26, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'library')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 31, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 36, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'version')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/identifier.xsd', 49, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'appliesTo')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 31, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'dependsOn')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 63, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'transformer')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 77, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_84()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), CTD_ANON_124, scope=CTD_ANON_77, documentation='A vendor-library-name-version identifier used to refer to components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 37, 7)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 37, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_85()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), libraryRefType, scope=CTD_ANON_78, documentation='A vendor-library-name-version identifier used to refer to components.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 69, 7)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 69, 7))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 69, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_86()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'xslt'), CTD_ANON_80, scope=CTD_ANON_79, documentation='An XSLT transformer that will transform the document based on rules defined in the xsl file mentioned here.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 83, 7)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'xslt')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 83, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_87()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'styleSheet'), spiritURI, scope=CTD_ANON_80, documentation='The relative path to the xsl stylesheet to be used for transformation.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 89, 10)))

CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=CTD_ANON_80, documentation='Parameters to be passed to the xslt stylesheet at run time.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 94, 10)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 94, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'styleSheet')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 89, 10))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 94, 10))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_88()




signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=signalType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.NMTOKEN, scope=signalType, documentation='The name of the signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 35, 3)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'direction'), componentSignalDirectionType, scope=signalType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 40, 3)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'left'), CTD_ANON_125, scope=signalType, documentation='Left vector bound.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 46, 4)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'right'), CTD_ANON_126, scope=signalType, documentation='Right vector bound.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 58, 4)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'defaultValue'), signalValueType, scope=signalType, documentation='The initial or default value on the signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 72, 4)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'export'), CTD_ANON_127, scope=signalType, documentation='Specifies whether a signal is to be exported out of the module.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 80, 3)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockDriver'), CTD_ANON_81, scope=signalType, documentation='Describes a driven clock signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 23, 1)))

signalType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver'), CTD_ANON_82, scope=signalType, documentation='Describes a driven one-shot signal.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 80, 1)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 41, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 71, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 72, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 77, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 78, 4))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 80, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 92, 3))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 35, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'direction')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 40, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'left')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 46, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'right')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 58, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'defaultValue')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 72, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockDriver')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 77, 4))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotDriver')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 78, 4))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'export')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 80, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(signalType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signal.xsd', 92, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False),
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
signalType._Automaton = _BuildAutomaton_89()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod'), CTD_ANON_137, scope=CTD_ANON_81, documentation='Clock period in nanoseconds', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 29, 4)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset'), CTD_ANON_138, scope=CTD_ANON_81, documentation='Time in nanoseconds until first pulse.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 41, 4)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue'), CTD_ANON_128, scope=CTD_ANON_81, documentation='Value of signal after first clock edge.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 53, 4)))

CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration'), CTD_ANON_139, scope=CTD_ANON_81, documentation='Duration in nanoseconds of first state in cycle.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 65, 4)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPeriod')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 29, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 41, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseValue')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 53, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'clockPulseDuration')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 65, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_90()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotOffset'), CTD_ANON_140, scope=CTD_ANON_82, documentation='Time in nanoseconds until start of one-shot.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 86, 4)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotValue'), CTD_ANON_129, scope=CTD_ANON_82, documentation='Value of signal after first  edge of one-shot.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 98, 4)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'singleShotDuration'), CTD_ANON_141, scope=CTD_ANON_82, documentation='Duration in nanoseconds of the one shot.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 110, 4)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 86, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotValue')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 98, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'singleShotDuration')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 110, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_91()




signalValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'value'), CTD_ANON_131, scope=signalValueType, documentation='The value of a signal.  1 or 0 for single bit signals, unsigned numeric otherwise.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 166, 1)))

signalValueType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'strength'), CTD_ANON_132, scope=signalValueType, documentation='The strength of the signal.  "strong" (default) or "weak".', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 178, 1)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 153, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(signalValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'strength')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 150, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(signalValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'value')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 152, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(signalValueType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'strength')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/signalDrivers.xsd', 153, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
signalValueType._Automaton = _BuildAutomaton_92()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configurableElement'), CTD_ANON_133, scope=CTD_ANON_83, documentation='Describes the configurable content of an element in the instance.  May contain text and/or child elements.\n\nThe required referenceId attribute refers to the ID attribute of the configurable element.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 33, 1)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 29, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configurableElement')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 29, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_93()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'configuration'), CTD_ANON_83, scope=CTD_ANON_84, documentation='All configuration information for a contained component or channel instance.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 23, 1)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'instanceName'), pyxb.binding.datatypes.Name, scope=CTD_ANON_84, documentation='An instance name assigned to subcomponent instances and contained channels, that is unique within the parent component.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 47, 1)))

CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentRef'), libraryRefType, scope=CTD_ANON_84, documentation='References a component to be found in an external library.  The name attribute gives the name of the component and the version attribute speicifies which version of the component to use.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 59, 4)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 64, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'instanceName')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 58, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentRef')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 59, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'configuration')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 64, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_94()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'componentInstance'), CTD_ANON_84, scope=CTD_ANON_85, documentation='Component instance element.  The instance name is contained in the unique-value instanceName attribute.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 52, 1)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 74, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'componentInstance')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 74, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_95()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'export'), CTD_ANON_134, scope=CTD_ANON_86, documentation='Specifies whether this ad-hoc connection will be exported out of the design.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 84, 4)))

CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'pinReference'), CTD_ANON_87, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 96, 4)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 84, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'export')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 84, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'pinReference')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 96, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_96()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection'), CTD_ANON_86, scope=CTD_ANON_88, documentation='Represents an ad-hoc connection between component pins.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 78, 1)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 114, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'adHocConnection')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 114, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_97()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'interconnection'), CTD_ANON_89, scope=CTD_ANON_90, documentation='Describes a connection from the interace of one comonent to the interface of another component through its attributes.\n\n The component1Ref and busInterface1Ref attributes indicate the instance name and bus interface name of one end of the connection. The component2Ref and busInterface2Ref attributes indicate the instance name and bus interface name of the other end of he connection. ', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 118, 1)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 137, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'interconnection')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 137, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_98()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_120, scope=CTD_ANON_91, documentation='Base of an address block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), CTD_ANON_121, scope=CTD_ANON_91, documentation='Base bit offset of an address block.  If not included, it is assumed to be 0.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 77, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 78, 12))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 77, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/busInterface.xsd', 78, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_99()




def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 172, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accessType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'looseGeneratorExe')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 227, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_115._Automaton = _BuildAutomaton_100()




CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'name'), pyxb.binding.datatypes.Name, scope=CTD_ANON_116, documentation='Name used to select a generator or generator chain.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 94, 4)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 94, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_116._Automaton = _BuildAutomaton_101()




instanceGeneratorType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'group'), pyxb.binding.datatypes.Name, scope=instanceGeneratorType, documentation='An identifier to specify the generator group. This is used by generator chains for selecting which generators to run.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 132, 5)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 132, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 172, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accessType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'looseGeneratorExe')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 227, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(instanceGeneratorType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 132, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
instanceGeneratorType._Automaton = _BuildAutomaton_102()




addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=addressBankType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=addressBankType, documentation='Indicates whether the data is volatile, default to false when not present.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), unicode_default='false'))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), accessType, scope=addressBankType, documentation="Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'baseAddress'), CTD_ANON_120, scope=addressBankType, documentation='Base of an address block.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 351, 2)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitOffset'), CTD_ANON_121, scope=addressBankType, documentation='Base bit offset of an address block.  If not included, it is assumed to be 0.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 364, 2)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), bankedBlockType, scope=addressBankType, documentation='An address block within the bank.  No address information is supplied.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 408, 8)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), bankedBankType, scope=addressBankType, documentation='A nested bank of blocks within a bank.  No address information is supplied.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 413, 8)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), bankedSubspaceType, scope=addressBankType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 418, 8)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=addressBankType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6)))

addressBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=addressBankType, documentation='Any additional parameters needed to describe this address block to the generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 399, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 421, 6))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'baseAddress')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 398, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitOffset')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 399, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 408, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 413, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 418, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(addressBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 421, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
addressBankType._Automaton = _BuildAutomaton_103()




bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions'), CTD_ANON_28, scope=bankedBankType, documentation='Container for vendor specific extensions.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/commonStructures.xsd', 75, 1)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'volatile'), pyxb.binding.datatypes.boolean, scope=bankedBankType, documentation='Indicates whether the data is volatile, default to false when not present.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 249, 2), unicode_default='false'))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'access'), accessType, scope=bankedBankType, documentation="Indicates the accessibility of the data in the address block.  Possible values are 'read-write', 'read-only' and 'write-only'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 254, 2)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'addressBlock'), bankedBlockType, scope=bankedBankType, documentation='An address block within the bank.  No address information is supplied.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 408, 8)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bank'), bankedBankType, scope=bankedBankType, documentation='A nested bank of blocks within a bank.  No address information is supplied.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 413, 8)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap'), bankedSubspaceType, scope=bankedBankType, location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 418, 8)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'usage'), usageType, scope=bankedBankType, documentation="Indicates the usage of this block.  Possible values are 'memory', 'register' and 'reserved'.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6)))

bankedBankType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'parameter'), nameValuePairType, scope=bankedBankType, documentation='Any additional parameters needed to describe this address block to the generators.', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 421, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 408, 8))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 413, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 418, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'usage')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 464, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'volatile')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 469, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'access')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 470, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 471, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(bankedBankType._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 421, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bankedBankType._Automaton = _BuildAutomaton_104()




CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau'), pyxb.binding.datatypes.positiveInteger, scope=CTD_ANON_119, documentation='The number of bits in the least addressable unit. The default is byte addressable (8 bits).', location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 376, 2)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 333, 10))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 213, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 214, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 337, 18))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 208, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'addressBlock')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 194, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bank')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'subspaceMap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 196, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'memoryRemap')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 214, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'bitsInLau')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/memoryMap.xsd', 337, 18))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_119._Automaton = _BuildAutomaton_105()




CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'displayLabel'), STD_ANON_12, scope=CTD_ANON_124, documentation="A display label to override the original component's display label if this 3MD will apply.", location=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 45, 12)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 45, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'displayLabel')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/pmd.xsd', 45, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_124._Automaton = _BuildAutomaton_106()




def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 41, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.WildcardUse(pyxb.binding.content.Wildcard(process_contents=pyxb.binding.content.Wildcard.PC_skip, namespace_constraint=pyxb.binding.content.Wildcard.NC_any), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/subInstances.xsd', 41, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_133._Automaton = _BuildAutomaton_107()




def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 132, 5))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'name')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 172, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'phase')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 177, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'parameter')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 178, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'accessType')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 179, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'looseGeneratorExe')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 227, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'vendorExtensions')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 232, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'group')), pyxb.utils.utility.Location('http://www.accellera.org/XMLSchema/SPIRIT/1.0/generator.xsd', 132, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_136._Automaton = _BuildAutomaton_108()

